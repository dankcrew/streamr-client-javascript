/* eslint-disable no-await-in-loop, no-use-before-define */
import { Contract, ContractFactory, providers, Wallet } from 'ethers'
import debug from 'debug'

import until from '../../src/utils'
import StreamrClient from '../../src'
import * as Token from '../../contracts/TestToken.json'
import * as DataUnionMainnet from '../../contracts/DataUnionMainnet.json'

import config from './config'

const log = debug('StreamrClient::DataUnionEndpoints::integration-test')
// const log = console.log

describe('DataUnionEndPoints', () => {
    // fresh dataUnion for each test case
    let dataUnion
    let adminClient

    const providerSidechain = new providers.JsonRpcProvider(config.clientOptions.sidechain)
    const providerMainnet = new providers.JsonRpcProvider(config.clientOptions.mainnet)
    const adminWalletMainnet = new Wallet(config.clientOptions.auth.privateKey, providerMainnet)
    const adminWalletSidechain = new Wallet(config.clientOptions.auth.privateKey, providerSidechain)

    beforeAll(async () => {
        log(`Connecting to Ethereum networks, config = ${JSON.stringify(config)}`)
        const network = await providerMainnet.getNetwork()
        log('Connected to "mainnet" network: ', JSON.stringify(network))
        const network2 = await providerSidechain.getNetwork()
        log('Connected to sidechain network: ', JSON.stringify(network2))

        // for faster manual testing, use a factory from previous runs
        // const factoryMainnet = new Contract('0x1e144C6fdcc4FcD2d66bf2c1e1F913FF5C7d5393', factoryMainnetABI, adminWalletMainnet)
        const factorySidechain = await deployDataUnionFactorySidechain(adminWalletSidechain)
        const templateSidechain = getTemplateSidechain()
        const factoryMainnet = await deployDataUnionFactoryMainnet(adminWalletMainnet, templateSidechain.address, factorySidechain.address)
        log(`Deployed factory contracts sidechain ${factorySidechain.address}, mainnet ${factoryMainnet.address}`)

        adminClient = new StreamrClient({
            ...config.clientOptions,
            factoryMainnetAddress: factoryMainnet.address,
            autoConnect: false,
            autoDisconnect: false,
        })
    }, 600000)

    beforeEach(async () => {
        await adminClient.ensureConnected()
        dataUnion = await adminClient.deployDataUnion()
        log(`Waiting for ${dataUnion.address} to be registered in sidechain`)
        await dataUnion.isReady()
        await adminClient.createSecret(dataUnion.address, 'secret', 'DataUnionEndpoints test secret')
        log(`DataUnion ${dataUnion.address} is ready to roll`)
        // dataUnion = await adminClient.getDataUnionContract({dataUnion: "0x832CF517A48efB0730b1D076356aD0754371Db2B"})
    }, 300000)

    afterAll(async () => {
        await providerMainnet.removeAllListeners()
        await providerSidechain.removeAllListeners()

        if (!adminClient) { return }
        await adminClient.ensureDisconnected()
    })

    describe('Admin', () => {
        const memberAddressList = [
            '0x0000000000000000000000000000000000000001',
            '0x0000000000000000000000000000000000000002',
            '0x000000000000000000000000000000000000bEEF',
        ]

        it('can add members', async () => {
            await adminClient.addMembers(memberAddressList, { dataUnion })
            await adminClient.hasJoined(memberAddressList[0], { dataUnion })
            const res = await adminClient.getDataUnionStats({ dataUnion })
            expect(+res.memberCount).toEqual(3)
        }, 100000)

        it('can remove members', async () => {
            await adminClient.addMembers(memberAddressList, { dataUnion })
            await adminClient.kick(memberAddressList.slice(1), { dataUnion })
            const res = await adminClient.getDataUnionStats({ dataUnion })
            expect(+res.memberCount).toEqual(1)
        }, 100000)

        // separate test for adding and removing secrets? Adding secret is tested in member joins dataUnion test though.

        it('can withdraw admin fees', async () => {
            log('TODO')
        })
    })

    describe('Member', () => {
        let memberClient

        const nonce = +new Date()
        const memberWallet = new Wallet(`0x100000000000000000000000000000000000000000000000001${+nonce}`, providerSidechain)
        const member2Wallet = new Wallet(`0x100000000000000000000000000000000000000000000000002${+nonce}`, providerSidechain)

        beforeEach(async () => {
            memberClient = new StreamrClient({
                ...config.clientOptions,
                auth: {
                    privateKey: memberWallet.privateKey
                },
                dataUnion: dataUnion.address,
                autoConnect: false,
                autoDisconnect: false,
            })
            await memberClient.ensureConnected()
        })

        afterEach(async () => {
            if (!memberClient) { return }
            await memberClient.ensureDisconnected()
        })

        // TODO: implement DU2 joining to EE
        it.skip('can join the data union', async () => {
            const res = await memberClient.joinDataUnion({ secret: 'secret' })
            await memberClient.hasJoined()
            expect(res).toMatchObject({
                state: 'ACCEPTED',
                memberAddress: memberWallet.address,
                contractAddress: dataUnion.address,
            })
        })

        it('can get its sidechain balances and stats', async () => {
            // TODO: change after DU2 joining is implemented in EE
            // await memberClient.joinDataUnion({ secret: 'secret' })
            await adminClient.addMembers([memberWallet.address], { dataUnion })
            const res = await memberClient.getMemberStats()
            expect(res).toEqual({
                status: 'active', // this means join worked
                earningsBeforeLastJoin: '0',
                lmeAtJoin: '0',
                totalEarnings: '0',
                withdrawableEarnings: '0',
            })
        }, 300000)

        it('can receive earnings from mainnet', async () => {
            // TODO: change after DU2 joining is implemented in EE
            // await memberClient.joinDataUnion({ secret: 'secret' })
            await adminClient.addMembers([memberWallet.address], { dataUnion })

            // transfer ERC20 to mainet contract
            const amount = '1000'
            const duSidechainBalanceBefore = await dataUnion.sidechain.totalEarnings()

            const tokenAddress = await dataUnion.token()
            const adminTokenMainnet = new Contract(tokenAddress, Token.abi, adminWalletMainnet)
            const tx1 = await adminTokenMainnet.transfer(dataUnion.address, amount)
            await tx1.wait()

            log(`Transferred ${amount} to ${dataUnion.address}, next sending to bridge`)
            const tx2 = await dataUnion.sendTokensToBridge({ gasLimit: 5000000 })
            await tx2.wait()

            log(`Sent to bridge, waiting for the tokens to appear at ${dataUnion.address} in sidechain`)
            await until(async () => !duSidechainBalanceBefore.eq(await dataUnion.sidechain.totalEarnings()), 360000)
            log(`Confirmed DU sidechain balance ${duSidechainBalanceBefore} -> ${await dataUnion.sidechain.totalEarnings()}`)

            // note: getMemberStats without explicit address => get stats of the authenticated StreamrClient
            const res = await memberClient.getMemberStats()
            expect(res).toMatchObject({
                status: 'active',
                earningsBeforeLastJoin: '0',
                lmeAtJoin: '0',
                totalEarnings: '0',
                withdrawableEarnings: '0',
            })
        }, 600000)

        it.skip('can withdraw earnings to mainnet', async () => {
            // TODO: change after DU2 joining is implemented in EE
            // await memberClient.joinDataUnion({ secret: 'secret' })
            await adminClient.addMembers([memberWallet.address], { dataUnion })

            // transfer ERC20 to mainet contract
            const amount = '1000'
            const duSidechainBalanceBefore = await dataUnion.sidechain.totalEarnings()

            const tokenAddress = await dataUnion.token()
            const adminTokenMainnet = new Contract(tokenAddress, Token.abi, adminWalletMainnet)

            const tx1 = await adminTokenMainnet.transfer(dataUnion.address, amount)
            await tx1.wait()

            log(`Transferred ${amount} to ${dataUnion.address}, next sending to bridge`)
            const tx2 = await dataUnion.sendTokensToBridge()
            await tx2.wait()

            log(`Sent to bridge, waiting for the tokens to appear at ${dataUnion.address} in sidechain`)
            await until(async () => !duSidechainBalanceBefore.eq(await dataUnion.sidechain.totalEarnings()), 360000)
            log(`Confirmed DU sidechain balance ${duSidechainBalanceBefore} -> ${await dataUnion.sidechain.totalEarnings()}`)

            const balanceBefore = await adminTokenMainnet.balanceOf(memberWallet.address)
            const tr = await memberClient.withdraw()
            const balanceAfter = await adminTokenMainnet.balanceOf(memberWallet.address)
            const diff = balanceAfter.sub(balanceBefore)

            expect(tr.logs[0].address).toBe(adminTokenMainnet.address)
            expect(diff.toString()).toBe(amount)
        }, 600000)

        it.skip('can "donate" earnings to another mainnet address', async () => {
            // TODO: change after DU2 joining is implemented in EE
            // await memberClient.joinDataUnion({ secret: 'secret' })
            await adminClient.addMembers([memberWallet.address], { dataUnion })

            // transfer ERC20 to mainet contract
            const amount = '1000'
            const duSidechainBalanceBefore = await dataUnion.sidechain.totalEarnings()

            const tokenAddress = await dataUnion.token()
            const adminTokenMainnet = new Contract(tokenAddress, Token.abi, adminWalletMainnet)

            const tx1 = await adminTokenMainnet.transfer(dataUnion.address, amount)
            await tx1.wait()

            log(`Transferred ${amount} to ${dataUnion.address}, next sending to bridge`)
            const tx2 = await dataUnion.sendTokensToBridge()
            await tx2.wait()

            log(`Sent to bridge, waiting for the tokens to appear at ${dataUnion.address} in sidechain`)
            await until(async () => !duSidechainBalanceBefore.eq(await dataUnion.sidechain.totalEarnings()), 360000)
            log(`Confirmed DU sidechain balance ${duSidechainBalanceBefore} -> ${await dataUnion.sidechain.totalEarnings()}`)

            const balanceBefore = await adminTokenMainnet.balanceOf(member2Wallet.address)
            const tr = await memberClient.withdrawTo(member2Wallet.address)
            const balanceAfter = await adminTokenMainnet.balanceOf(member2Wallet.address)
            const diff = balanceAfter.sub(balanceBefore)

            expect(tr.logs[0].address).toBe(adminTokenMainnet.address)
            expect(diff.toString()).toBe(amount)
        }, 600000)

        // TODO: test getWithdrawTx, getWithdrawTxTo
    })

    describe('Anyone', () => {
        const nonce = +new Date()
        const memberAddressList = [
            `0x100000000000000000000000000${nonce}`,
            `0x200000000000000000000000000${nonce}`,
            `0x300000000000000000000000000${nonce}`,
        ]

        let client
        beforeEach(async () => {
            client = new StreamrClient({
                auth: {
                    apiKey: 'tester1-api-key'
                },
                dataUnion: dataUnion.address,
                autoConnect: false,
                autoDisconnect: false,
                ...config.clientOptions,
            })
            // TODO: add revenue
            await adminClient.addMembers(memberAddressList, { dataUnion })
        }, 300000)
        afterEach(async () => {
            if (!client) { return }
            await client.ensureDisconnected()
        })

        it('can get dataUnion stats', async () => {
            const stats = await client.getDataUnionStats()
            expect(+stats.memberCount).toEqual(3)
            expect(+stats.joinPartAgentCount).toEqual(1)
            expect(+stats.totalEarnings).toEqual(0)
            expect(+stats.totalWithdrawable).toEqual(0)
            expect(+stats.lifetimeMemberEarnings).toEqual(0)
        }, 300000)

        it('can get member stats', async () => {
            const memberStats = await Promise.all(memberAddressList.map((m) => client.getMemberStats(m)))
            expect(memberStats).toMatchObject([{
                status: 'active',
                earningsBeforeLastJoin: '0',
                lmeAtJoin: '0',
                totalEarnings: '0',
                withdrawableEarnings: '0',
            }, {
                status: 'active',
                earningsBeforeLastJoin: '0',
                lmeAtJoin: '0',
                totalEarnings: '0',
                withdrawableEarnings: '0',
            }, {
                status: 'active',
                earningsBeforeLastJoin: '0',
                lmeAtJoin: '0',
                totalEarnings: '0',
                withdrawableEarnings: '0',
            }])
        }, 300000)
    })
})

// for the below helpers, check out https://github.com/streamr-dev/data-union-solidity/tree/master/util

// TODO: these should also go into the .env file?
const tokenMediatorSidechainAddress = '0x6cCdd5d866ea766f6DF5965aA98DeCCD629ff222'
const tokenMediatorMainnetAddress = '0x3AE0ad89b0e094fD09428589849C161f0F7f4E6A'
let templateSidechain

/* eslint-disable max-len, object-curly-newline */
// constructor + methods needed by deployment
const factoryMainnetABI = [
    { type: 'constructor', inputs: [{ type: 'address' }, { type: 'address' }, { type: 'address' }, { type: 'address' }, { type: 'uint256' }], stateMutability: 'nonpayable' },
    { name: 'sidechainAddress', inputs: [{ type: 'address' }], outputs: [{ type: 'address' }], stateMutability: 'view', type: 'function' },
    { name: 'mainnetAddress', inputs: [{ type: 'address' }, { type: 'string' }], outputs: [{ type: 'address' }], stateMutability: 'view', type: 'function' },
    { name: 'deployNewDataUnion', inputs: [{ type: 'address' }, { type: 'uint256' }, { type: 'address[]' }, { type: 'string' }], outputs: [{ type: 'address' }], stateMutability: 'nonpayable', type: 'function' }
]
// just constructor
const factorySidechainABI = [{ inputs: [{ type: 'address' }, { type: 'address' }], stateMutability: 'nonpayable', type: 'constructor' }]

const factoryMainnetBytecode = '0x608060405234801561001057600080fd5b50604051610a24380380610a24833981810160405260a081101561003357600080fd5b5080516020808301516040808501516060860151608090960151600580546001600160a01b03199081166001600160a01b03808a16919091179283905560008054831682891617905560018054831682871617905560028054909216818b1617909155845163cd59658360e01b81529451979895979396929491169263cd59658392600483810193919291829003018186803b1580156100d257600080fd5b505afa1580156100e6573d6000803e3d6000fd5b505050506040513d60208110156100fc57600080fd5b5051600480546001600160a01b039092166001600160a01b0319909216919091179055600355505050506108ef806101356000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063692199d411610066578063692199d4146100f2578063c5a8c91f1461010c578063cb8a191b14610114578063d4c31bd414610253578063e4a154a41461030957610093565b8063015a0da0146100985780631062b39a146100bc57806317c2a98c146100c457806335813bc1146100ea575b600080fd5b6100a0610311565b604080516001600160a01b039092168252519081900360200190f35b6100a0610320565b6100a0600480360360208110156100da57600080fd5b50356001600160a01b031661032f565b6100a0610359565b6100fa610368565b60408051918252519081900360200190f35b6100a061036e565b6100a06004803603608081101561012a57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561015a57600080fd5b82018360208201111561016c57600080fd5b8035906020019184602083028401116401000000008311171561018e57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156101de57600080fd5b8201836020820111156101f057600080fd5b8035906020019184600183028401116401000000008311171561021257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061037d945050505050565b6100a06004803603604081101561026957600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561029457600080fd5b8201836020820111156102a657600080fd5b803590602001918460018302840111640100000000831117156102c857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061062e945050505050565b6100a06106db565b6000546001600160a01b031681565b6004546001600160a01b031681565b600154600254600091610353916001600160a01b03918216919081169085166106ea565b92915050565b6002546001600160a01b031681565b60035481565b6005546001600160a01b031681565b60008082336040516020018083805190602001908083835b602083106103b45780518252601f199092019160209182019101610395565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160a01b03166001600160a01b031660601b8152601401925050506040516020818303038152906040528051906020012090506060600560009054906101000a90046001600160a01b0316600260009054906101000a90046001600160a01b0316600354600160009054906101000a90046001600160a01b03168a8a8a60405160240180886001600160a01b03166001600160a01b03168152602001876001600160a01b03166001600160a01b03168152602001868152602001856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156105065781810151838201526020016104ee565b50506040805193909501838103601f190184529094525060208101805163f658af4560e01b6001600160e01b0390911617905260008054919d509b5061056b9a5061056499506001600160a01b031697506107569650505050505050565b83856107a8565b90506001600160a01b0381166105c8576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f64755f616c72656164795f637265617465640000000000000000604482015290519081900360640190fd5b876001600160a01b03166105db8261032f565b600054604080516001600160a01b039283168152905192821692918516917f7bb36c64b37ae129eda8a24fd78defec04cc7a06bb27863c5a4571dd5d70acee9181900360200190a4979650505050505050565b60008082846040516020018083805190602001908083835b602083106106655780518252601f199092019160209182019101610646565b51815160209384036101000a600019018019909216911617905260609590951b6bffffffffffffffffffffffff191692019182525060408051808303600b190181526014909201905280519201919091206000549093506106d392506001600160a01b0316905030836106ea565b949350505050565b6001546001600160a01b031681565b6000806106f685610756565b8051602091820120604080516001600160f81b0319818501526bffffffffffffffffffffffff19606089901b1660218201526035810187905260558082019390935281518082039093018352607501905280519101209150509392505050565b604080516057810190915260378152733d602d80600a3d3981f3363d3d373d3d3d363d7360601b602082015260609190911b60348201526e5af43d82803e903d91602b57fd5bf360881b604882015290565b825160009082816020870184f58451909250156108b1576000826001600160a01b0316856040518082805190602001908083835b602083106107fb5780518252601f1990920191602091820191016107dc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461085d576040519150601f19603f3d011682016040523d82523d6000602084013e610862565b606091505b50509050806108af576040805162461bcd60e51b815260206004820152601460248201527332b93937b92fb4b734ba34b0b634bd30ba34b7b760611b604482015290519081900360640190fd5b505b50939250505056fea26469706673582212205453f13d9f72b676b8a5e6124d889f2dd7e30b1f800fa1a44f66baa243eac73664736f6c63430006060033'
const factorySidechainBytecode = '0x608060405234801561001057600080fd5b506040516107153803806107158339818101604052604081101561003357600080fd5b508051602091820151600280546001600160a01b038085166001600160a01b03199283161792839055600080548286169316929092179091556040805163cd59658360e01b8152905194959394929091169263cd59658392600480840193829003018186803b1580156100a557600080fd5b505afa1580156100b9573d6000803e3d6000fd5b505050506040513d60208110156100cf57600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055506106139050806101026000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631062b39a1461005c57806317c2a98c14610080578063b33ff60b146100a6578063c5a8c91f1461015e578063e4a154a414610166575b600080fd5b61006461016e565b604080516001600160a01b039092168252519081900360200190f35b6100646004803603602081101561009657600080fd5b50356001600160a01b031661017d565b610064600480360360608110156100bc57600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156100ec57600080fd5b8201836020820111156100fe57600080fd5b8035906020019184602083028401116401000000008311171561012057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506101a0945050505050565b6100646103f0565b6100646103ff565b6001546001600160a01b031681565b6000805461019a906001600160a01b03908116903090851661040e565b92915050565b60015460009081906001600160a01b031633146101bd5733610238565b600160009054906101000a90046001600160a01b03166001600160a01b031663d67bdd256040518163ffffffff1660e01b815260040160206040518083038186803b15801561020b57600080fd5b505afa15801561021f573d6000803e3d6000fd5b505050506040513d602081101561023557600080fd5b50515b600254604080516318d8f9c960e01b815290519293506001600160a01b03808516936060938a939216916318d8f9c9916004808301926020929190829003018186803b15801561028757600080fd5b505afa15801561029b573d6000803e3d6000fd5b505050506040513d60208110156102b157600080fd5b50516002546040516001600160a01b03848116602483019081528185166044840152606483018c905292811660a4830181905290881660c483015260c0608483019081528a5160e48401528a518c948c948b939192610104909101906020878101910280838360005b8381101561033257818101518382015260200161031a565b50506040805193909501838103601f190184529094525060208101805163ba1a4de960e01b6001600160e01b0390911617905260008054919c509a50610396995061038f98506001600160a01b0316965061047a95505050505050565b83856104cc565b600054604080516001600160a01b0392831681529051929350818b1692828516928816917f90d0a5d098b9a181ff8ddc866f840cc210e5b91eaf27bc267d5822a0deafad25919081900360200190a4979650505050505050565b6002546001600160a01b031681565b6000546001600160a01b031681565b60008061041a8561047a565b8051602091820120604080516001600160f81b0319818501526bffffffffffffffffffffffff19606089901b1660218201526035810187905260558082019390935281518082039093018352607501905280519101209150509392505050565b604080516057810190915260378152733d602d80600a3d3981f3363d3d373d3d3d363d7360601b602082015260609190911b60348201526e5af43d82803e903d91602b57fd5bf360881b604882015290565b825160009082816020870184f58451909250156105d5576000826001600160a01b0316856040518082805190602001908083835b6020831061051f5780518252601f199092019160209182019101610500565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610581576040519150601f19603f3d011682016040523d82523d6000602084013e610586565b606091505b50509050806105d3576040805162461bcd60e51b815260206004820152601460248201527332b93937b92fb4b734ba34b0b634bd30ba34b7b760611b604482015290519081900360640190fd5b505b50939250505056fea26469706673582212206a83e117e35bef463df35358f8b81781a658e9e7dbccabaf50b699dde7bf39ae64736f6c63430006060033'

const dataUnionMainnetBytecode = '0x608060405234801561001057600080fd5b50600080546001600160a01b0319169055610ef2806100306000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063e22ec11211610071578063e22ec1121461028c578063e30c397814610294578063f2fde38b1461029c578063f658af45146102c2578063fc0c546a1461039b5761010b565b80638da5cb5b1461026c578063a65c87d914610274578063c5a8c91f1461027c578063deec742b146102845761010b565b80634a439cc0116100de5780634a439cc0146101725780634e71e0c8146101b05780635f6dcb8c146101ba578063692199d4146102645761010b565b80631062b39a146101105780632efc10071461013457806337b43a941461014e578063392e53cd14610156575b600080fd5b6101186103a3565b604080516001600160a01b039092168252519081900360200190f35b61013c6103b2565b60408051918252519081900360200190f35b61011861086a565b61015e61088f565b604080519115158252519081900360200190f35b61015e600480360360a081101561018857600080fd5b508035906001600160a01b0360208201351690604081013590606081013590608001356108a0565b6101b86108b7565b005b6101b8600480360360408110156101d057600080fd5b813591908101906040810160208201356401000000008111156101f257600080fd5b82018360208201111561020457600080fd5b8035906020019184602083028401116401000000008311171561022657600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061096d945050505050565b61013c610b18565b610118610b1e565b610118610b2d565b610118610b3c565b61013c610b4b565b610118610b51565b610118610b60565b6101b8600480360360208110156102b257600080fd5b50356001600160a01b0316610b6f565b6101b8600480360360e08110156102d857600080fd5b6001600160a01b0382358116926020810135821692604082013592606083013581169260808101359091169160a0820135919081019060e0810160c082013564010000000081111561032957600080fd5b82018360208201111561033b57600080fd5b8035906020019184602083028401116401000000008311171561035d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610bdc945050505050565b610118610d8e565b6002546001600160a01b031681565b600754604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561040257600080fd5b505afa158015610416573d6000803e3d6000fd5b505050506040513d602081101561042c57600080fd5b505190508061043f576000915050610867565b6007546003546040805163095ea7b360e01b81526001600160a01b0392831660048201526000602482018190529151929093169263095ea7b39260448083019360209383900390910190829087803b15801561049a57600080fd5b505af11580156104ae573d6000803e3d6000fd5b505050506040513d60208110156104c457600080fd5b5051610508576040805162461bcd60e51b815260206004820152600e60248201526d185c1c1c9bdd9957d9985a5b195960921b604482015290519081900360640190fd5b6007546003546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018590529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561056157600080fd5b505af1158015610575573d6000803e3d6000fd5b505050506040513d602081101561058b57600080fd5b50516105cf576040805162461bcd60e51b815260206004820152600e60248201526d185c1c1c9bdd9957d9985a5b195960921b604482015290519081900360640190fd5b6003546001600160a01b031663ad58bdd1306105e961086a565b846040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b5050600754604080516370a0823160e01b815230600482015290516001600160a01b0390921693506370a082319250602480820192602092909190829003018186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d60208110156106df57600080fd5b505115610725576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c97d9985a5b1959608a1b604482015290519081900360640190fd5b600654610738908263ffffffff610d9d16565b6006556040805160048152602481019091526020810180516001600160e01b03166371d1ae7560e01b1790526002546001600160a01b031663dc8601b361077d61086a565b6005546040516001600160e01b031960e085901b1681526001600160a01b038316600482019081526044820183905260606024830190815287516064840152875188949360840190602086019080838360005b838110156107e85781810151838201526020016107d0565b50505050905090810190601f1680156108155780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561083657600080fd5b505af115801561084a573d6000803e3d6000fd5b505050506040513d602081101561086057600080fd5b5091925050505b90565b60085460045460009161088a916001600160a01b03918216911630610dfe565b905090565b6007546001600160a01b0316151590565b60006108aa6103b2565b5060019695505050505050565b6001546001600160a01b03163314610909576040805162461bcd60e51b815260206004820152601060248201526f37b7363ca832b73234b733a7bbb732b960811b604482015290519081900360640190fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b60606000809054906101000a90046001600160a01b0316838360405160240180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156109e75781810151838201526020016109cf565b50506040805193909501838103601f190184528552505060208101805163b33ff60b60e01b6001600160e01b0390911617815260025460048054600554965163dc8601b360e01b81526001600160a01b0391821692810183815260448201899052606060248301908152875160648401528751979f50929094169c5063dc8601b39b509199508c9850959650909493506084019180838360005b83811015610a99578181015183820152602001610a81565b50505050905090810190601f168015610ac65780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610ae757600080fd5b505af1158015610afb573d6000803e3d6000fd5b505050506040513d6020811015610b1157600080fd5b5050505050565b60055481565b6000546001600160a01b031681565b6008546001600160a01b031681565b6003546001600160a01b031681565b60065481565b6004546001600160a01b031681565b6001546001600160a01b031681565b6000546001600160a01b03163314610bba576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610be461088f565b15610c22576040805162461bcd60e51b8152602060048201526009602482015268696e69745f6f6e636560b81b604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0389811691909117918290556040805163cd59658360e01b81529051929091169163cd59658391600480820192602092909190829003018186803b158015610c7e57600080fd5b505afa158015610c92573d6000803e3d6000fd5b505050506040513d6020811015610ca857600080fd5b5051600280546001600160a01b0319166001600160a01b03928316179055600354604080516318d8f9c960e01b8152905191909216916318d8f9c9916004808301926020929190829003018186803b158015610d0357600080fd5b505afa158015610d17573d6000803e3d6000fd5b505050506040513d6020811015610d2d57600080fd5b5051600780546001600160a01b03199081166001600160a01b0393841617909155600480548216898416179055600587905560088054821687841617905560008054909116918516919091179055610d85828261096d565b50505050505050565b6007546001600160a01b031681565b600082820183811015610df7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600080610e0a85610e6a565b8051602091820120604080516001600160f81b0319818501526bffffffffffffffffffffffff19606089901b1660218201526035810187905260558082019390935281518082039093018352607501905280519101209150509392505050565b604080516057810190915260378152733d602d80600a3d3981f3363d3d373d3d3d363d7360601b602082015260609190911b60348201526e5af43d82803e903d91602b57fd5bf360881b60488201529056fea26469706673582212203d5c3896f415c6e878109dd8992f1a4b89fce77916a1ae350df5aaff69d0d29e64736f6c63430006060033'
const dataUnionSidechainBytecode = '0x608060405234801561001057600080fd5b50600080546001600160a01b03191690556128f5806100306000396000f3fe6080604052600436106102555760003560e01c806373e2290c11610139578063bf1e42c0116100b6578063ce7b78641161007a578063ce7b786414610d3e578063e30c397814610e11578063e6018c3114610e26578063ead5d35914610e50578063f2fde38b14610e91578063fc0c546a14610ec45761025c565b8063bf1e42c014610c3d578063c44b73a314610c52578063c59d484714610ca9578063ca6d56dc14610cf6578063cc77244014610d295761025c565b80639107d08e116100fd5780639107d08e146109e4578063a2d3cf4b14610a50578063a4d6ddc014610b21578063ae66d94814610bd1578063b274bcc714610c045761025c565b806373e2290c1461089a57806379049017146108db5780637b30ed43146108f057806385a212461461099e5780638da5cb5b146109b35761025c565b80633ebff90e116101d25780635fb6c6ed116101965780635fb6c6ed14610741578063662d45a2146107565780636d8018b8146107895780636f4d469b1461079e57806371cdfd681461084c57806371d1ae75146108855761025c565b80633ebff90e146106015780634bee9137146106165780634e40ea64146106515780634e71e0c814610684578063593b79fe146106995761025c565b80631a79246c116102195780631a79246c1461047d5780632b94411f146105555780632df3eba4146105905780632e0d4212146105a5578063392e53cd146105d85761025c565b8063015c7f51146102615780630600a8651461034257806309a6400b14610369578063131b9c041461039c5780631796621a146103cf5761025c565b3661025c57005b600080fd5b34801561026d57600080fd5b50610340600480360360c081101561028457600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156102b757600080fd5b8201836020820111156102c957600080fd5b803590602001918460208302840111600160201b831117156102ea57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b0383358116945060208401351692604001359150610ed99050565b005b34801561034e57600080fd5b50610357610fc6565b60408051918252519081900360200190f35b34801561037557600080fd5b506103406004803603602081101561038c57600080fd5b50356001600160a01b0316610fe5565b3480156103a857600080fd5b50610357600480360360208110156103bf57600080fd5b50356001600160a01b0316611105565b3480156103db57600080fd5b50610340600480360360208110156103f257600080fd5b810190602081018135600160201b81111561040c57600080fd5b82018360208201111561041e57600080fd5b803590602001918460208302840111600160201b8311171561043f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506111b5945050505050565b34801561048957600080fd5b50610357600480360360a08110156104a057600080fd5b6001600160a01b038235811692602081013590911691604082013591606081013515159181019060a081016080820135600160201b8111156104e157600080fd5b8201836020820111156104f357600080fd5b803590602001918460018302840111600160201b8311171561051457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611234945050505050565b34801561056157600080fd5b506103576004803603604081101561057857600080fd5b506001600160a01b038135169060200135151561129e565b34801561059c57600080fd5b506103576112ba565b3480156105b157600080fd5b50610357600480360360208110156105c857600080fd5b50356001600160a01b03166112c0565b3480156105e457600080fd5b506105ed6112e9565b604080519115158252519081900360200190f35b34801561060d57600080fd5b506103576112fa565b34801561062257600080fd5b506103576004803603604081101561063957600080fd5b506001600160a01b0381351690602001351515611300565b34801561065d57600080fd5b506103406004803603602081101561067457600080fd5b50356001600160a01b031661131c565b34801561069057600080fd5b5061034061146e565b3480156106a557600080fd5b506106cc600480360360208110156106bc57600080fd5b50356001600160a01b0316611524565b6040805160208082528351818301528351919283929083019185019080838360005b838110156107065781810151838201526020016106ee565b50505050905090810190601f1680156107335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561074d57600080fd5b50610357611548565b34801561076257600080fd5b506103406004803603602081101561077957600080fd5b50356001600160a01b031661154e565b34801561079557600080fd5b50610357611672565b3480156107aa57600080fd5b50610340600480360360208110156107c157600080fd5b810190602081018135600160201b8111156107db57600080fd5b8201836020820111156107ed57600080fd5b803590602001918460208302840111600160201b8311171561080e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611678945050505050565b34801561085857600080fd5b506103406004803603604081101561086f57600080fd5b506001600160a01b038135169060200135611714565b34801561089157600080fd5b506103576117e5565b3480156108a657600080fd5b50610357600480360360608110156108bd57600080fd5b506001600160a01b038135169060208101359060400135151561194d565b3480156108e757600080fd5b50610357611963565b3480156108fc57600080fd5b506103406004803603602081101561091357600080fd5b810190602081018135600160201b81111561092d57600080fd5b82018360208201111561093f57600080fd5b803590602001918460208302840111600160201b8311171561096057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611969945050505050565b3480156109aa57600080fd5b50610357611999565b3480156109bf57600080fd5b506109c861199f565b604080516001600160a01b039092168252519081900360200190f35b3480156109f057600080fd5b50610a1760048036036020811015610a0757600080fd5b50356001600160a01b03166119ae565b60405180856002811115610a2757fe5b60ff16815260200184815260200183815260200182815260200194505050505060405180910390f35b348015610a5c57600080fd5b506105ed60048036036080811015610a7357600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b811115610aad57600080fd5b820183602082011115610abf57600080fd5b803590602001918460018302840111600160201b83111715610ae057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506119d9945050505050565b348015610b2d57600080fd5b5061035760048036036040811015610b4457600080fd5b810190602081018135600160201b811115610b5e57600080fd5b820183602082011115610b7057600080fd5b803590602001918460208302840111600160201b83111715610b9157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505050503515159050611bdb565b348015610bdd57600080fd5b5061035760048036036020811015610bf457600080fd5b50356001600160a01b0316611c1f565b348015610c1057600080fd5b5061034060048036036040811015610c2757600080fd5b506001600160a01b038135169060200135611c97565b348015610c4957600080fd5b506109c8611f0d565b348015610c5e57600080fd5b50610c8560048036036020811015610c7557600080fd5b50356001600160a01b0316611f1c565b60405180826002811115610c9557fe5b60ff16815260200191505060405180910390f35b348015610cb557600080fd5b50610cbe611f31565b604051808260a080838360005b83811015610ce3578181015183820152602001610ccb565b5050505090500191505060405180910390f35b348015610d0257600080fd5b5061034060048036036020811015610d1957600080fd5b50356001600160a01b0316611f6f565b348015610d3557600080fd5b506109c8612146565b348015610d4a57600080fd5b5061035760048036036080811015610d6157600080fd5b6001600160a01b038235811692602081013590911691604082013515159190810190608081016060820135600160201b811115610d9d57600080fd5b820183602082011115610daf57600080fd5b803590602001918460018302840111600160201b83111715610dd057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612155945050505050565b348015610e1d57600080fd5b506109c86121c7565b348015610e3257600080fd5b5061034060048036036020811015610e4957600080fd5b50356121d6565b348015610e5c57600080fd5b5061035760048036036060811015610e7357600080fd5b506001600160a01b038135169060208101359060400135151561226c565b348015610e9d57600080fd5b5061034060048036036020811015610eb457600080fd5b50356001600160a01b03166122e1565b348015610ed057600080fd5b506109c861234e565b610ee16112e9565b15610f33576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f616c7265616479496e697469616c697a65640000000000000000604482015290519081900360640190fd5b60008054336001600160a01b031991821617909155600280549091166001600160a01b038716179055610f65846111b5565b600380546001600160a01b038086166001600160a01b0319928316179092556004805492851692909116919091179055610f9e816121d6565b5050600080546001600160a01b0319166001600160a01b039590951694909417909355505050565b6000610fdf60065460055461235d90919063ffffffff16565b90505b90565b6000546001600160a01b03163314611030576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60016001600160a01b0382166000908152600c602052604090205460ff16600281111561105957fe5b146110a2576040805162461bcd60e51b8152602060048201526014602482015273195c9c9bdc97db9bdd1058dd1a5d995059d95b9d60621b604482015290519081900360640190fd5b6001600160a01b0381166000818152600c6020526040808220805460ff19166002179055517feac6c7d5a1c157497119a5d4f661d5f23b844c415452ef440ed346bd127d885e9190a26009546110ff90600163ffffffff61235d16565b60095550565b6001600160a01b0381166000908152600b6020526040812081815460ff16600281111561112e57fe5b1415611173576040805162461bcd60e51b815260206004820152600f60248201526e32b93937b92fb737ba26b2b6b132b960891b604482015290519081900360640190fd5b6001815460ff16600281111561118557fe5b146111915760006111a8565b60028101546008546111a89163ffffffff61235d16565b6001909101540192915050565b6000546001600160a01b03163314611200576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60005b81518110156112305761122882828151811061121b57fe5b602002602001015161154e565b600101611203565b5050565b6000611242868686856119d9565b611288576040805162461bcd60e51b81526020600482015260126024820152716572726f725f6261645369676e617475726560701b604482015290519081900360640190fd5b6112948686868661239f565b9695505050505050565b60006112b3836112ad336112c0565b8461194d565b5092915050565b60055481565b60006112e36112ce83611c1f565b6112d784611105565b9063ffffffff61235d16565b92915050565b6002546001600160a01b0316151590565b60095481565b60006113158361130f856112c0565b8461226c565b9392505050565b336001600160a01b038216148061135057506001336000908152600c602052604090205460ff16600281111561134e57fe5b145b611396576040805162461bcd60e51b8152602060048201526012602482015271195c9c9bdc97db9bdd14195c9b5a5d1d195960721b604482015290519081900360640190fd5b6001600160a01b0381166000908152600b602052604090206001815460ff1660028111156113c057fe5b1461140a576040805162461bcd60e51b815260206004820152601560248201527432b93937b92fb737ba20b1ba34bb32a6b2b6b132b960591b604482015290519081900360640190fd5b61141382611105565b600182810191909155815460ff191660021782556007546114339161235d565b6007556040516001600160a01b038316907f7df2bff504799b36cafb9574b3fcfd8432ef4a1fa89d1ba9fe40324501adf5f590600090a25050565b6001546001600160a01b031633146114c0576040805162461bcd60e51b815260206004820152601060248201526f37b7363ca832b73234b733a7bbb732b960811b604482015290519081900360640190fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b604080516001600160a01b0392909216600560a21b18601483015260348201905290565b60075481565b6000546001600160a01b03163314611599576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60016001600160a01b0382166000908152600c602052604090205460ff1660028111156115c257fe5b1415611615576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f616c72656164794163746976654167656e740000000000000000604482015290519081900360640190fd5b6001600160a01b0381166000818152600c6020526040808220805460ff19166001179055517f10581818fb1ffbfd9ac8500cba931a30c3a57b5e9b7972f2fa0aef002b3fde2b9190a26009546110ff90600163ffffffff6126b016565b60085481565b6001336000908152600c602052604090205460ff16600281111561169857fe5b146116e4576040805162461bcd60e51b8152602060048201526017602482015276195c9c9bdc97dbdb9b1e529bda5b94185c9d1059d95b9d604a1b604482015290519081900360640190fd5b60005b81518110156112305761170c8282815181106116ff57fe5b6020026020010151611f6f565b6001016116e7565b8061171e336112c0565b101561176d576040805162461bcd60e51b81526020600482015260196024820152786572726f725f696e73756666696369656e7442616c616e636560381b604482015290519081900360640190fd5b336000908152600b602052604090206003810154611791908363ffffffff6126b016565b60038201556117a0838361270a565b6040805183815290516001600160a01b0385169133917f638ce96e87261f007ef5c0389bb59b90db3e19c42edee859d6b09739d8d79f7f9181900360200190a3505050565b600254604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561183557600080fd5b505afa158015611849573d6000803e3d6000fd5b505050506040513d602081101561185f57600080fd5b50519050600061187d611870610fc6565b839063ffffffff61235d16565b90508061188f57600092505050610fe2565b60006118a66007548361276390919063ffffffff16565b6008549091506118bc908263ffffffff6126b016565b6008556005546118d2908363ffffffff6126b016565b6005556040805183815290517f41b06c6e0a1531dcb4b86d53ec6268666aa12d55775f8e5a63596fc935cdcc229181900360200190a160075460408051838152602081019290925280517f24a9873073eba764d17ef9fa7475b3b209c02e6e6f7ed991c9c80e09226a37a79281900390910190a15091505090565b600061195b3385858561239f565b509392505050565b600a5481565b60005b81518110156112305761199182828151811061198457fe5b602002602001015161131c565b60010161196c565b60065481565b6000546001600160a01b031681565b600b60205260009081526040902080546001820154600283015460039093015460ff90921692909184565b60008151604114611a31576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f6261645369676e61747572654c656e6774680000000000000000604482015290519081900360640190fd5b60208201516040830151606084015160001a601b811015611a5057601b015b8060ff16601b1480611a6557508060ff16601c145b611ab6576040805162461bcd60e51b815260206004820152601960248201527f6572726f725f6261645369676e617475726556657273696f6e00000000000000604482015290519081900360640190fd5b6000878730611ac48c611c1f565b60405160200180807f19457468657265756d205369676e6564204d6573736167653a0a313034000000815250601d01856001600160a01b03166001600160a01b031660601b8152601401848152602001836001600160a01b03166001600160a01b031660601b8152601401828152602001945050505050604051602081830303815290604052805190602001209050600060018284878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611bb2573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038c811691161496505050505050505b949350505050565b600080805b845181101561195b57611c16611c09868381518110611bfb57fe5b602002602001015186611300565b839063ffffffff6126b016565b50600101611be0565b6001600160a01b0381166000908152600b6020526040812081815460ff166002811115611c4857fe5b1415611c8d576040805162461bcd60e51b815260206004820152600f60248201526e32b93937b92fb737ba26b2b6b132b960891b604482015290519081900360640190fd5b6003015492915050565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611ce257600080fd5b505afa158015611cf6573d6000803e3d6000fd5b505050506040513d6020811015611d0c57600080fd5b5051600254604080516323b872dd60e01b81523360048201523060248201526044810186905290519293506001600160a01b03909116916323b872dd916064808201926020929091908290030181600087803b158015611d6b57600080fd5b505af1158015611d7f573d6000803e3d6000fd5b505050506040513d6020811015611d9557600080fd5b5051611dd9576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e2457600080fd5b505afa158015611e38573d6000803e3d6000fd5b505050506040513d6020811015611e4e57600080fd5b5051905082611e63828463ffffffff61235d16565b1015611ea7576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b611eb1848461270a565b600554611ec4908463ffffffff6126b016565b6005556040805184815290516001600160a01b0386169133917f4e018df3c92158645fcf45007db7029d3fa97d269866be2bd4360c5f5a6163e49181900360200190a350505050565b6004546001600160a01b031681565b600c6020526000908152604090205460ff1681565b611f396128a1565b6040518060a001604052806005548152602001600654815260200160075481526020016008548152602001600954815250905090565b6001336000908152600c602052604090205460ff166002811115611f8f57fe5b14611fdb576040805162461bcd60e51b8152602060048201526017602482015276195c9c9bdc97dbdb9b1e529bda5b94185c9d1059d95b9d604a1b604482015290519081900360640190fd5b6001600160a01b0381166000908152600b602052604090206001815460ff16600281111561200557fe5b141561204e576040805162461bcd60e51b815260206004820152601360248201527232b93937b92fb0b63932b0b23ca6b2b6b132b960691b604482015290519081900360640190fd5b600080825460ff16600281111561206157fe5b14801561207057506000600a54115b801561207e5750600a544710155b825460ff19166001908117845560085460028501556007549192506120a391906126b0565b6007556040516001600160a01b038416907f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab90600090a2801561214157600a546040516001600160a01b0385169180156108fc02916000818181858888f193505050501561214157600a5460408051918252517f55e2724f03f2711a94cf86d8b10c57130b103d6c2f1726076fbf9430340d41e79181900360200190a15b505050565b6003546001600160a01b031681565b600061216485856000856119d9565b6121aa576040805162461bcd60e51b81526020600482015260126024820152716572726f725f6261645369676e617475726560701b604482015290519081900360640190fd5b6121be85856121b8886112c0565b8661239f565b95945050505050565b6001546001600160a01b031681565b6000546001600160a01b03163314612221576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600a5481141561223057612269565b600a8190556040805182815290517f749d0aa4ca45d6142166deb1820b64a888996311bb9f74a88c081f5b041d949c9181900360200190a15b50565b6000336001600160a01b038516148061228f57506000546001600160a01b031633145b6122d5576040805162461bcd60e51b8152602060048201526012602482015271195c9c9bdc97db9bdd14195c9b5a5d1d195960721b604482015290519081900360640190fd5b61195b8485858561239f565b6000546001600160a01b0316331461232c576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b600061131583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506127a5565b6000826123ae57506000611bd3565b6123b7856112c0565b831115612407576040805162461bcd60e51b81526020600482015260196024820152786572726f725f696e73756666696369656e7442616c616e636560381b604482015290519081900360640190fd5b6001600160a01b0385166000908152600b602052604090206003810154612434908563ffffffff6126b016565b600382015560065461244c908563ffffffff6126b016565b60065582156125a3576002546003546001600160a01b0391821691634000aea091168661247889611524565b6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156124e25781810151838201526020016124ca565b50505050905090810190601f16801561250f5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561253057600080fd5b505af1158015612544573d6000803e3d6000fd5b505050506040513d602081101561255a57600080fd5b505161259e576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b612667565b6002546040805163a9059cbb60e01b81526001600160a01b038881166004830152602482018890529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156125f957600080fd5b505af115801561260d573d6000803e3d6000fd5b505050506040513d602081101561262357600080fd5b5051612667576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b6040805185815290516001600160a01b038816917f48dc35af7b45e2a81fffad55f6e2fafacdb1d3d0d50d24ebdc16324f5ba757f1919081900360200190a25091949350505050565b600082820183811015611315576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152600b602052604090206001810154612737908363ffffffff6126b016565b60018201556000815460ff16600281111561274e57fe5b141561214157805460ff191660021790555050565b600061131583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061283c565b600081848411156128345760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127f95781810151838201526020016127e1565b50505050905090810190601f1680156128265780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000818361288b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156127f95781810151838201526020016127e1565b50600083858161289757fe5b0495945050505050565b6040518060a00160405280600590602082028036833750919291505056fea2646970667358221220f26a08535a6e36b0e8c8861ae1577cac26ef08d22acaa1275ef1f92773a57bed64736f6c63430006060033'
/* eslint-enable max-len, object-curly-newline */

/**
 * Deploy template DataUnion contract as well as factory to sidechain
 * @param wallet {Wallet} sidechain wallet that is used in deployment
 * @returns {Promise<Contract>} DataUnionFactorySidechain contract
 */
async function deployDataUnionFactorySidechain(wallet) {
    log(`Deploying template DU sidechain contract from ${wallet.address}`)
    const templateDeployer = new ContractFactory([], dataUnionSidechainBytecode, wallet)
    const templateTx = await templateDeployer.deploy({
        gasLimit: 6000000
    })
    templateSidechain = await templateTx.deployed()
    log(`Side-chain template DU: ${templateSidechain.address}`)

    // constructor(address _token_mediator, address _data_union_sidechain_template)
    log(`Deploying sidechain DU factory contract from ${wallet.address}`)
    const factoryDeployer = new ContractFactory(factorySidechainABI, factorySidechainBytecode, wallet)
    const factoryTx = await factoryDeployer.deploy(
        tokenMediatorSidechainAddress,
        templateSidechain.address,
        {
            gasLimit: 6000000
        }
    )
    return factoryTx.deployed()
}

function getTemplateSidechain() {
    if (!templateSidechain) {
        throw new Error('deployDataUnionFactorySidechain must be called (and awaited) first')
    }
    return templateSidechain
}

async function deployDataUnionFactoryMainnet(wallet, sidechainTemplateAddress, sidechainFactoryAddress) {
    log(`Deploying template DU mainnet contract from ${wallet.address}`)
    const templateDeployer = new ContractFactory([], dataUnionMainnetBytecode, wallet)
    const templateTx = await templateDeployer.deploy({
        gasLimit: 6000000
    })
    const templateDU = await templateTx.deployed()
    log(`Mainnet template DU: ${templateDU.address}. Deploying DU mainnet factory contract from ${wallet.address}`)
    const factoryDeployer = new ContractFactory(factoryMainnetABI, factoryMainnetBytecode, wallet)
    const factoryTx = await factoryDeployer.deploy(
        tokenMediatorMainnetAddress,
        templateDU.address,
        sidechainTemplateAddress,
        sidechainFactoryAddress,
        2000000,
        {
            gasLimit: 6000000
        }
    )
    return factoryTx.deployed()
}
