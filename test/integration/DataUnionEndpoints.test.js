/* eslint-disable no-await-in-loop, no-use-before-define */
import { Contract, ContractFactory, providers, utils, Wallet } from 'ethers'
import debug from 'debug'
import { wait } from 'streamr-test-utils'

import until from '../../src/utils'
import StreamrClient from '../../src'
import * as Token from '../../contracts/TestToken.json'
import * as DataUnionMainnet from '../../contracts/DataUnionMainnet.json'

import config from './config'

// const log = debug('StreamrClient::DataUnionEndpoints::integration-test')
const log = console.log

describe('DataUnionEndPoints', () => {
    // fresh dataUnion for each test case
    let duSidechain
    let duName
    let adminClient

    const providerSidechain = new providers.JsonRpcProvider(config.sidechain)
    const providerMainnet = new providers.JsonRpcProvider(config.mainnet)
    const walletSidechain = new Wallet(config.privateKey, providerSidechain)
    const walletMainnet = new Wallet(config.privateKey, providerMainnet)
    const adminTokenMainnet = new Contract(config.tokenAddress, Token.abi, walletMainnet)
    // const adminTokenSidechain = new Contract(config.tokenAddressSidechain, Token.abi, walletSidechain)

    beforeAll(async () => {
        // for faster manual testing, use a factory from previous runs
        // const factoryMainnet = new Contract("0xD5beE21175494389A10aFDA8FeBC8465A3A35DE0", factoryMainnetABI, walletMainnet)
        const factorySidechain = await deployDataUnionFactorySidechain(walletSidechain)
        const templateSidechain = getTemplateSidechain()
        const factoryMainnet = await deployDataUnionFactoryMainnet(walletMainnet, templateSidechain.address, factorySidechain.address)
        log(`Deployed factory contracts sidechain ${factorySidechain.address}, mainnet ${factoryMainnet.address}`)

        adminClient = new StreamrClient({
            factoryMainnetAddress: factoryMainnet.address,
            auth: {
                privateKey: config.privateKey
            },
            autoConnect: false,
            autoDisconnect: false,
            ...config.clientOptions,
        })

        log(`Connecting to Ethereum networks, config = ${JSON.stringify(config)}`)
        const network = await providerMainnet.getNetwork()
        log('Connected to "mainnet" network: ', JSON.stringify(network))
        const network2 = await providerSidechain.getNetwork()
        log('Connected to sidechain network: ', JSON.stringify(network2))
    }, 300000)

    beforeEach(async () => {
        await adminClient.ensureConnected()
        duName = 'test' + +new Date()
        duSidechain = await adminClient.deployDataUnion(duName, {
            provider: providerMainnet,
        })
        await duSidechain.isReady()
        log(`DataUnion ${duSidechain.address} is ready to roll`)
        await adminClient.createSecret(duSidechain.address, 'secret', 'DataUnionEndpoints test secret')
    }, 300000)

    afterAll(async () => {
        await providerMainnet.removeAllListeners()
        await providerSidechain.removeAllListeners()

        if (!adminClient) { return }
        await adminClient.ensureDisconnected()
    })

    describe('Admin', () => {
        const memberAddressList = [
            '0x0000000000000000000000000000000000000001',
            '0x0000000000000000000000000000000000000002',
            '0x000000000000000000000000000000000000bEEF',
        ]

        it('can add and remove members', async () => {
            log('starting test')
            // await adminClient.dataUnionIsReady(duSidechain.address, log)

            await adminClient.addMembers(duSidechain.address, memberAddressList)
            // await adminClient.hasJoined(duSidechain.address, memberAddressList[0])
            const res = await adminClient.getDataUnionStats(duSidechain.address)
            expect(res.memberCount).toEqual({
                total: 3, active: 3, inactive: 0
            })

            await adminClient.kick(duSidechain.address, memberAddressList.slice(1))
            const res2 = await adminClient.getDataUnionStats(duSidechain.address)
            expect(res2.memberCount).toEqual({
                total: 3, active: 1, inactive: 2
            })
        }, 300000)

        // separate test for adding and removing secrets? Adding secret is tested in member joins dataUnion test though.
    })

    describe('Member', () => {
        let memberClient
        const memberWallet = new Wallet('0x1000000000000000000000000000000000000000000000000000000000000001', providerSidechain)
        const member2Wallet = new Wallet('0x1000000000000000000000000000000000000000000000000000000000000002', providerSidechain)

        beforeAll(async () => {
            memberClient = new StreamrClient({
                auth: {
                    privateKey: memberWallet.privateKey
                },
                autoConnect: false,
                autoDisconnect: false,
                ...config.clientOptions,
            })
            await memberClient.ensureConnected()
        })

        afterAll(async () => {
            if (!memberClient) { return }
            await memberClient.ensureDisconnected()
        })

        it('can join the data union', async () => {
            const res = await memberClient.joinDataUnion(duSidechain.address, 'secret')
            await memberClient.hasJoined(duSidechain.address)
            expect(res).toMatchObject({
                state: 'ACCEPTED',
                memberAddress: memberWallet.address,
                contractAddress: duSidechain.address,
            })
        })

        it('can get its sidechain balances and stats', async () => {
            await memberClient.joinDataUnion(duSidechain.address, 'secret')
            const res = await memberClient.getMemberStats(duSidechain.address)
            expect(res).toEqual({
                active: true,
                address: memberWallet.address,
                earnings: '0',
                recordedEarnings: '0',
                withdrawableEarnings: '0',
                frozenEarnings: '0'
            })
        })

        it('can receive earnings from mainnet', async () => {
            await memberClient.joinDataUnion(duSidechain.address, 'secret')

            // transfer ERC20 to mainet contract
            const tokenWei = utils.parseEther('1')
            const duSidechainBalanceBefore = await duSidechain.totalEarnings()

            const duMainnetAddress = adminClient.getDataUnionMainnetAddress(duName)
            const tx1 = await adminTokenMainnet.transfer(duMainnetAddress, tokenWei)
            await tx1.wait()

            log(`Transferred ${tokenWei} to ${duMainnetAddress}, next sending to bridge`)
            const duMainnet = new Contract(duMainnetAddress, DataUnionMainnet.abi, walletMainnet)
            const tx2 = await duMainnet.sendTokensToBridge()
            await tx2.wait()

            log(`Sent to bridge, waiting for the tokens to appear at ${duSidechain.address} in sidechain`)
            await until(async () => !duSidechainBalanceBefore.eq(await duSidechain.totalEarnings()), 360000)
            log(`Confirmed DU sidechain balance ${duSidechainBalanceBefore} -> ${await duSidechain.totalEarnings()}`)

            // note: getMemberStats without explicit address => get stats of the authenticated StreamrClient
            const res = await memberClient.getMemberStats(duSidechain.address)
            expect(res).toMatchObject({
                active: true,
                address: memberWallet.address,
                earnings: '1000000000000000000',
                recordedEarnings: '1000000000000000000',
                withdrawableEarnings: '1000000000000000000',
                frozenEarnings: '0',
                withdrawableBlockNumber: res.withdrawableBlockNumber,
            })
        }, 600000)

        it('can withdraw earnings to mainnet', async () => {
            await memberClient.joinDataUnion(duSidechain.address, 'secret')

            // transfer ERC20 to mainet contract
            const tokenWei = utils.parseEther('1')
            const duSidechainBalanceBefore = await duSidechain.totalEarnings()

            const duMainnetAddress = adminClient.getDataUnionMainnetAddress(duName)
            const tx1 = await adminTokenMainnet.transfer(duMainnetAddress, tokenWei)
            await tx1.wait()

            log(`Transferred ${tokenWei} to ${duMainnetAddress}, next sending to bridge`)
            const duMainnet = new Contract(duMainnetAddress, DataUnionMainnet.abi, walletMainnet)
            const tx2 = await duMainnet.sendTokensToBridge()
            await tx2.wait()

            log(`Sent to bridge, waiting for the tokens to appear at ${duSidechain.address} in sidechain`)
            await until(async () => !duSidechainBalanceBefore.eq(await duSidechain.totalEarnings()), 360000)
            log(`Confirmed DU sidechain balance ${duSidechainBalanceBefore} -> ${await duSidechain.totalEarnings()}`)

            const balanceBefore = await adminTokenMainnet.balanceOf(memberWallet.address)
            const tr = await memberClient.withdraw(duSidechain.address)
            const balanceAfter = await adminTokenMainnet.balanceOf(memberWallet.address)
            const diff = balanceAfter.sub(balanceBefore)

            expect(tr.logs[0].address).toBe(adminTokenMainnet.address)
            expect(diff.toString()).toBe(tokenWei)
        }, 600000)

        it('can "donate" earnings to another mainnet address', async () => {
            await memberClient.joinDataUnion(duSidechain.address, 'secret')

            // transfer ERC20 to mainet contract
            const tokenWei = utils.parseEther('1')
            const duSidechainBalanceBefore = await duSidechain.totalEarnings()

            const duMainnetAddress = adminClient.getDataUnionMainnetAddress(duName)
            const tx1 = await adminTokenMainnet.transfer(duMainnetAddress, tokenWei)
            await tx1.wait()

            log(`Transferred ${tokenWei} to ${duMainnetAddress}, next sending to bridge`)
            const duMainnet = new Contract(duMainnetAddress, DataUnionMainnet.abi, walletMainnet)
            const tx2 = await duMainnet.sendTokensToBridge()
            await tx2.wait()

            log(`Sent to bridge, waiting for the tokens to appear at ${duSidechain.address} in sidechain`)
            await until(async () => !duSidechainBalanceBefore.eq(await duSidechain.totalEarnings()), 360000)
            log(`Confirmed DU sidechain balance ${duSidechainBalanceBefore} -> ${await duSidechain.totalEarnings()}`)

            const balanceBefore = await adminTokenMainnet.balanceOf(member2Wallet.address)
            const tr = await memberClient.withdrawTo(member2Wallet.address, duSidechain.address)
            const balanceAfter = await adminTokenMainnet.balanceOf(member2Wallet.address)
            const diff = balanceAfter.sub(balanceBefore)

            expect(tr.logs[0].address).toBe(adminTokenMainnet.address)
            expect(diff.toString()).toBe(tokenWei)
        }, 600000)

        // TODO: test getWithdrawTx, getWithdrawTxTo
    })

    describe('Anyone', () => {
        const memberAddressList = [
            '0x0000000000000000000000000000000000000001',
            '0x0000000000000000000000000000000000000002',
            '0x000000000000000000000000000000000000bEEF',
        ]

        let client
        beforeAll(async () => {
            client = new StreamrClient({
                auth: {
                    apiKey: 'tester1-api-key'
                },
                autoConnect: false,
                autoDisconnect: false,
                ...config.clientOptions,
            })
        })
        afterAll(async () => {
            if (!client) { return }
            await client.ensureDisconnected()
        })

        it('can get dataUnion stats', async () => {
            await adminClient.addMembers(duSidechain.address, memberAddressList, testProvider)
            await adminClient.hasJoined(duSidechain.address, memberAddressList[0])

            // mint tokens to dataUnion to generate revenue

            const stats = client.getDataUnionStats(dataunionSidechainAddress)
            expect(stats.memberCount).toEqual(3)
            expect(stats.totalEarnings).toEqual(3)
            expect(stats.totalWithdrawable).toEqual(3)
            expect(stats.lifetimeMemberEarnings).toEqual(3)
        })

        it('can get member stats', async () => {
            // TODO: clean up asserts
            const cstats = await client.getDataUnionStats(duSidechain.address)
            const mlist = await client.getMembers(duSidechain.address)

            expect(cstats.memberCount).toEqual({
                total: 3, active: 3, inactive: 0
            })
            expect(cstats.totalEarnings).toBe('1000000000000000000')
            expect(cstats.latestWithdrawableBlock.memberCount).toBe(4)
            expect(cstats.latestWithdrawableBlock.totalEarnings).toBe('1000000000000000000')
            expect(mlist).toEqual([{
                active: true,
                address: '0x0000000000000000000000000000000000000001',
                earnings: '333333333333333333'
            },
            {
                active: true,
                address: '0x0000000000000000000000000000000000000002',
                earnings: '333333333333333333'
            },
            {
                active: true,
                address: '0x000000000000000000000000000000000000bEEF',
                earnings: '333333333333333333'
            }])
            expect(mstats).toMatchObject({
                active: true,
                address: '0x0000000000000000000000000000000000000001',
                earnings: '333333333333333333',
                recordedEarnings: '333333333333333333',
                withdrawableEarnings: '333333333333333333',
                frozenEarnings: '0',
                withdrawableBlockNumber: cstats.latestWithdrawableBlock.blockNumber,
            })
        }, 300000)
    })
})

// for the below helpers, check out https://github.com/streamr-dev/data-union-solidity/tree/master/util

// TODO: these should also go into the .env file?
const tokenMediatorSidechainAddress = '0x6cCdd5d866ea766f6DF5965aA98DeCCD629ff222'
const tokenMediatorMainnetAddress = '0x3AE0ad89b0e094fD09428589849C161f0F7f4E6A'
let templateSidechain

/* eslint-disable max-len, object-curly-newline */
// constructor + methods needed by deployment
const factoryMainnetABI = [
    { type: 'constructor', inputs: [{ type: 'address' }, { type: 'address' }, { type: 'address' }, { type: 'address' }, { type: 'uint256' }], stateMutability: 'nonpayable' },
    { name: 'sidechainAddress', inputs: [{ type: 'address' }], outputs: [{ type: 'address' }], stateMutability: 'view', type: 'function' },
    { name: 'mainnetAddress', inputs: [{ type: 'address' }, { type: 'string' }], outputs: [{ type: 'address' }], stateMutability: 'view', type: 'function' },
    { name: 'deployNewDataUnion', inputs: [{ type: 'address' }, { type: 'uint256' }, { type: 'address[]' }, { type: 'string' }], outputs: [{ type: 'address' }], stateMutability: 'nonpayable', type: 'function' }
]
// just constructor
const factorySidechainABI = [{ inputs: [{ type: 'address' }, { type: 'address' }], stateMutability: 'nonpayable', type: 'constructor' }]

const factoryMainnetBytecode = '0x608060405234801561001057600080fd5b50604051610a24380380610a24833981810160405260a081101561003357600080fd5b5080516020808301516040808501516060860151608090960151600580546001600160a01b03199081166001600160a01b03808a16919091179283905560008054831682891617905560018054831682871617905560028054909216818b1617909155845163cd59658360e01b81529451979895979396929491169263cd59658392600483810193919291829003018186803b1580156100d257600080fd5b505afa1580156100e6573d6000803e3d6000fd5b505050506040513d60208110156100fc57600080fd5b5051600480546001600160a01b039092166001600160a01b0319909216919091179055600355505050506108ef806101356000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063692199d411610066578063692199d4146100f2578063c5a8c91f1461010c578063cb8a191b14610114578063d4c31bd414610253578063e4a154a41461030957610093565b8063015a0da0146100985780631062b39a146100bc57806317c2a98c146100c457806335813bc1146100ea575b600080fd5b6100a0610311565b604080516001600160a01b039092168252519081900360200190f35b6100a0610320565b6100a0600480360360208110156100da57600080fd5b50356001600160a01b031661032f565b6100a0610359565b6100fa610368565b60408051918252519081900360200190f35b6100a061036e565b6100a06004803603608081101561012a57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561015a57600080fd5b82018360208201111561016c57600080fd5b8035906020019184602083028401116401000000008311171561018e57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156101de57600080fd5b8201836020820111156101f057600080fd5b8035906020019184600183028401116401000000008311171561021257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061037d945050505050565b6100a06004803603604081101561026957600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561029457600080fd5b8201836020820111156102a657600080fd5b803590602001918460018302840111640100000000831117156102c857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061062e945050505050565b6100a06106db565b6000546001600160a01b031681565b6004546001600160a01b031681565b600154600254600091610353916001600160a01b03918216919081169085166106ea565b92915050565b6002546001600160a01b031681565b60035481565b6005546001600160a01b031681565b60008082336040516020018083805190602001908083835b602083106103b45780518252601f199092019160209182019101610395565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160a01b03166001600160a01b031660601b8152601401925050506040516020818303038152906040528051906020012090506060600560009054906101000a90046001600160a01b0316600260009054906101000a90046001600160a01b0316600354600160009054906101000a90046001600160a01b03168a8a8a60405160240180886001600160a01b03166001600160a01b03168152602001876001600160a01b03166001600160a01b03168152602001868152602001856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156105065781810151838201526020016104ee565b50506040805193909501838103601f190184529094525060208101805163f658af4560e01b6001600160e01b0390911617905260008054919d509b5061056b9a5061056499506001600160a01b031697506107569650505050505050565b83856107a8565b90506001600160a01b0381166105c8576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f64755f616c72656164795f637265617465640000000000000000604482015290519081900360640190fd5b876001600160a01b03166105db8261032f565b600054604080516001600160a01b039283168152905192821692918516917f7bb36c64b37ae129eda8a24fd78defec04cc7a06bb27863c5a4571dd5d70acee9181900360200190a4979650505050505050565b60008082846040516020018083805190602001908083835b602083106106655780518252601f199092019160209182019101610646565b51815160209384036101000a600019018019909216911617905260609590951b6bffffffffffffffffffffffff191692019182525060408051808303600b190181526014909201905280519201919091206000549093506106d392506001600160a01b0316905030836106ea565b949350505050565b6001546001600160a01b031681565b6000806106f685610756565b8051602091820120604080516001600160f81b0319818501526bffffffffffffffffffffffff19606089901b1660218201526035810187905260558082019390935281518082039093018352607501905280519101209150509392505050565b604080516057810190915260378152733d602d80600a3d3981f3363d3d373d3d3d363d7360601b602082015260609190911b60348201526e5af43d82803e903d91602b57fd5bf360881b604882015290565b825160009082816020870184f58451909250156108b1576000826001600160a01b0316856040518082805190602001908083835b602083106107fb5780518252601f1990920191602091820191016107dc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461085d576040519150601f19603f3d011682016040523d82523d6000602084013e610862565b606091505b50509050806108af576040805162461bcd60e51b815260206004820152601460248201527332b93937b92fb4b734ba34b0b634bd30ba34b7b760611b604482015290519081900360640190fd5b505b50939250505056fea26469706673582212205453f13d9f72b676b8a5e6124d889f2dd7e30b1f800fa1a44f66baa243eac73664736f6c63430006060033'
const factorySidechainBytecode = '0x608060405234801561001057600080fd5b506040516107153803806107158339818101604052604081101561003357600080fd5b508051602091820151600280546001600160a01b038085166001600160a01b03199283161792839055600080548286169316929092179091556040805163cd59658360e01b8152905194959394929091169263cd59658392600480840193829003018186803b1580156100a557600080fd5b505afa1580156100b9573d6000803e3d6000fd5b505050506040513d60208110156100cf57600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055506106139050806101026000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631062b39a1461005c57806317c2a98c14610080578063b33ff60b146100a6578063c5a8c91f1461015e578063e4a154a414610166575b600080fd5b61006461016e565b604080516001600160a01b039092168252519081900360200190f35b6100646004803603602081101561009657600080fd5b50356001600160a01b031661017d565b610064600480360360608110156100bc57600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156100ec57600080fd5b8201836020820111156100fe57600080fd5b8035906020019184602083028401116401000000008311171561012057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506101a0945050505050565b6100646103f0565b6100646103ff565b6001546001600160a01b031681565b6000805461019a906001600160a01b03908116903090851661040e565b92915050565b60015460009081906001600160a01b031633146101bd5733610238565b600160009054906101000a90046001600160a01b03166001600160a01b031663d67bdd256040518163ffffffff1660e01b815260040160206040518083038186803b15801561020b57600080fd5b505afa15801561021f573d6000803e3d6000fd5b505050506040513d602081101561023557600080fd5b50515b600254604080516318d8f9c960e01b815290519293506001600160a01b03808516936060938a939216916318d8f9c9916004808301926020929190829003018186803b15801561028757600080fd5b505afa15801561029b573d6000803e3d6000fd5b505050506040513d60208110156102b157600080fd5b50516002546040516001600160a01b03848116602483019081528185166044840152606483018c905292811660a4830181905290881660c483015260c0608483019081528a5160e48401528a518c948c948b939192610104909101906020878101910280838360005b8381101561033257818101518382015260200161031a565b50506040805193909501838103601f190184529094525060208101805163ba1a4de960e01b6001600160e01b0390911617905260008054919c509a50610396995061038f98506001600160a01b0316965061047a95505050505050565b83856104cc565b600054604080516001600160a01b0392831681529051929350818b1692828516928816917f90d0a5d098b9a181ff8ddc866f840cc210e5b91eaf27bc267d5822a0deafad25919081900360200190a4979650505050505050565b6002546001600160a01b031681565b6000546001600160a01b031681565b60008061041a8561047a565b8051602091820120604080516001600160f81b0319818501526bffffffffffffffffffffffff19606089901b1660218201526035810187905260558082019390935281518082039093018352607501905280519101209150509392505050565b604080516057810190915260378152733d602d80600a3d3981f3363d3d373d3d3d363d7360601b602082015260609190911b60348201526e5af43d82803e903d91602b57fd5bf360881b604882015290565b825160009082816020870184f58451909250156105d5576000826001600160a01b0316856040518082805190602001908083835b6020831061051f5780518252601f199092019160209182019101610500565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610581576040519150601f19603f3d011682016040523d82523d6000602084013e610586565b606091505b50509050806105d3576040805162461bcd60e51b815260206004820152601460248201527332b93937b92fb4b734ba34b0b634bd30ba34b7b760611b604482015290519081900360640190fd5b505b50939250505056fea26469706673582212206a83e117e35bef463df35358f8b81781a658e9e7dbccabaf50b699dde7bf39ae64736f6c63430006060033'

const dataUnionMainnetBytecode = '0x608060405234801561001057600080fd5b50600080546001600160a01b0319169055610ef2806100306000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063e22ec11211610071578063e22ec1121461028c578063e30c397814610294578063f2fde38b1461029c578063f658af45146102c2578063fc0c546a1461039b5761010b565b80638da5cb5b1461026c578063a65c87d914610274578063c5a8c91f1461027c578063deec742b146102845761010b565b80634a439cc0116100de5780634a439cc0146101725780634e71e0c8146101b05780635f6dcb8c146101ba578063692199d4146102645761010b565b80631062b39a146101105780632efc10071461013457806337b43a941461014e578063392e53cd14610156575b600080fd5b6101186103a3565b604080516001600160a01b039092168252519081900360200190f35b61013c6103b2565b60408051918252519081900360200190f35b61011861086a565b61015e61088f565b604080519115158252519081900360200190f35b61015e600480360360a081101561018857600080fd5b508035906001600160a01b0360208201351690604081013590606081013590608001356108a0565b6101b86108b7565b005b6101b8600480360360408110156101d057600080fd5b813591908101906040810160208201356401000000008111156101f257600080fd5b82018360208201111561020457600080fd5b8035906020019184602083028401116401000000008311171561022657600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061096d945050505050565b61013c610b18565b610118610b1e565b610118610b2d565b610118610b3c565b61013c610b4b565b610118610b51565b610118610b60565b6101b8600480360360208110156102b257600080fd5b50356001600160a01b0316610b6f565b6101b8600480360360e08110156102d857600080fd5b6001600160a01b0382358116926020810135821692604082013592606083013581169260808101359091169160a0820135919081019060e0810160c082013564010000000081111561032957600080fd5b82018360208201111561033b57600080fd5b8035906020019184602083028401116401000000008311171561035d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610bdc945050505050565b610118610d8e565b6002546001600160a01b031681565b600754604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561040257600080fd5b505afa158015610416573d6000803e3d6000fd5b505050506040513d602081101561042c57600080fd5b505190508061043f576000915050610867565b6007546003546040805163095ea7b360e01b81526001600160a01b0392831660048201526000602482018190529151929093169263095ea7b39260448083019360209383900390910190829087803b15801561049a57600080fd5b505af11580156104ae573d6000803e3d6000fd5b505050506040513d60208110156104c457600080fd5b5051610508576040805162461bcd60e51b815260206004820152600e60248201526d185c1c1c9bdd9957d9985a5b195960921b604482015290519081900360640190fd5b6007546003546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018590529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561056157600080fd5b505af1158015610575573d6000803e3d6000fd5b505050506040513d602081101561058b57600080fd5b50516105cf576040805162461bcd60e51b815260206004820152600e60248201526d185c1c1c9bdd9957d9985a5b195960921b604482015290519081900360640190fd5b6003546001600160a01b031663ad58bdd1306105e961086a565b846040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b5050600754604080516370a0823160e01b815230600482015290516001600160a01b0390921693506370a082319250602480820192602092909190829003018186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d60208110156106df57600080fd5b505115610725576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c97d9985a5b1959608a1b604482015290519081900360640190fd5b600654610738908263ffffffff610d9d16565b6006556040805160048152602481019091526020810180516001600160e01b03166371d1ae7560e01b1790526002546001600160a01b031663dc8601b361077d61086a565b6005546040516001600160e01b031960e085901b1681526001600160a01b038316600482019081526044820183905260606024830190815287516064840152875188949360840190602086019080838360005b838110156107e85781810151838201526020016107d0565b50505050905090810190601f1680156108155780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561083657600080fd5b505af115801561084a573d6000803e3d6000fd5b505050506040513d602081101561086057600080fd5b5091925050505b90565b60085460045460009161088a916001600160a01b03918216911630610dfe565b905090565b6007546001600160a01b0316151590565b60006108aa6103b2565b5060019695505050505050565b6001546001600160a01b03163314610909576040805162461bcd60e51b815260206004820152601060248201526f37b7363ca832b73234b733a7bbb732b960811b604482015290519081900360640190fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b60606000809054906101000a90046001600160a01b0316838360405160240180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156109e75781810151838201526020016109cf565b50506040805193909501838103601f190184528552505060208101805163b33ff60b60e01b6001600160e01b0390911617815260025460048054600554965163dc8601b360e01b81526001600160a01b0391821692810183815260448201899052606060248301908152875160648401528751979f50929094169c5063dc8601b39b509199508c9850959650909493506084019180838360005b83811015610a99578181015183820152602001610a81565b50505050905090810190601f168015610ac65780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610ae757600080fd5b505af1158015610afb573d6000803e3d6000fd5b505050506040513d6020811015610b1157600080fd5b5050505050565b60055481565b6000546001600160a01b031681565b6008546001600160a01b031681565b6003546001600160a01b031681565b60065481565b6004546001600160a01b031681565b6001546001600160a01b031681565b6000546001600160a01b03163314610bba576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610be461088f565b15610c22576040805162461bcd60e51b8152602060048201526009602482015268696e69745f6f6e636560b81b604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0389811691909117918290556040805163cd59658360e01b81529051929091169163cd59658391600480820192602092909190829003018186803b158015610c7e57600080fd5b505afa158015610c92573d6000803e3d6000fd5b505050506040513d6020811015610ca857600080fd5b5051600280546001600160a01b0319166001600160a01b03928316179055600354604080516318d8f9c960e01b8152905191909216916318d8f9c9916004808301926020929190829003018186803b158015610d0357600080fd5b505afa158015610d17573d6000803e3d6000fd5b505050506040513d6020811015610d2d57600080fd5b5051600780546001600160a01b03199081166001600160a01b0393841617909155600480548216898416179055600587905560088054821687841617905560008054909116918516919091179055610d85828261096d565b50505050505050565b6007546001600160a01b031681565b600082820183811015610df7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600080610e0a85610e6a565b8051602091820120604080516001600160f81b0319818501526bffffffffffffffffffffffff19606089901b1660218201526035810187905260558082019390935281518082039093018352607501905280519101209150509392505050565b604080516057810190915260378152733d602d80600a3d3981f3363d3d373d3d3d363d7360601b602082015260609190911b60348201526e5af43d82803e903d91602b57fd5bf360881b60488201529056fea26469706673582212203d5c3896f415c6e878109dd8992f1a4b89fce77916a1ae350df5aaff69d0d29e64736f6c63430006060033'
const dataUnionSidechainBytecode = '0x608060405234801561001057600080fd5b50600080546001600160a01b031916905561299a806100306000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c806385a212461161015c578063bf2d9e0b116100ce578063d7e5487c11610087578063d7e5487c14610c45578063e30c397814610c64578063ead5d35914610c6c578063f2de565114610ca0578063f2fde38b14610ca8578063fc0c546a14610cce5761027f565b8063bf2d9e0b14610af7578063c44b73a314610aff578063c5a8c91f14610b49578063ca6d56dc14610b51578063ce7b786414610b77578063d35cec4014610c3d5761027f565b8063a2d3cf4b11610120578063a2d3cf4b1461085f578063a4d6ddc014610923578063a913f41d146109c6578063ae66d948146109ce578063b274bcc7146109f4578063ba1a4de914610a205761027f565b806385a21246146107cb5780638beb60b6146107d35780638da5cb5b146107f05780639107d08e146107f8578063937e8c7b146108575761027f565b80634e40ea64116101f5578063662d45a2116101b9578063662d45a2146105fb5780636f4d469b1461062157806371cdfd68146106c257806371d1ae75146106ee57806373e2290c146106f65780637b30ed431461072a5761027f565b80634e40ea64146105065780634e71e0c81461052c57806354b608a414610534578063593b79fe1461055857806361feacff146105f35761027f565b80632b94411f116102475780632b94411f146104585780632df3eba4146104865780632e0d42121461048e578063392e53cd146104b45780634bee9137146104d05780634c2541b8146104fe5761027f565b80630600a8651461028457806309a6400b1461029e578063131b9c04146102c65780631796621a146102ec5780631a79246c1461038d575b600080fd5b61028c610cd6565b60408051918252519081900360200190f35b6102c4600480360360208110156102b457600080fd5b50356001600160a01b0316610cfe565b005b61028c600480360360208110156102dc57600080fd5b50356001600160a01b0316610e1c565b6102c46004803603602081101561030257600080fd5b810190602081018135600160201b81111561031c57600080fd5b82018360208201111561032e57600080fd5b803590602001918460208302840111600160201b8311171561034f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610ecd945050505050565b61028c600480360360a08110156103a357600080fd5b6001600160a01b038235811692602081013590911691604082013591606081013515159181019060a081016080820135600160201b8111156103e457600080fd5b8201836020820111156103f657600080fd5b803590602001918460018302840111600160201b8311171561041757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610f4c945050505050565b61028c6004803603604081101561046e57600080fd5b506001600160a01b0381351690602001351515610fb6565b61028c610fd2565b61028c600480360360208110156104a457600080fd5b50356001600160a01b0316610fd8565b6104bc610ff5565b604080519115158252519081900360200190f35b61028c600480360360408110156104e657600080fd5b506001600160a01b0381351690602001351515611006565b61028c611022565b6102c46004803603602081101561051c57600080fd5b50356001600160a01b0316611028565b6102c4611171565b61053c611227565b604080516001600160a01b039092168252519081900360200190f35b61057e6004803603602081101561056e57600080fd5b50356001600160a01b0316611236565b6040805160208082528351818301528351919283929083019185019080838360005b838110156105b85781810151838201526020016105a0565b50505050905090810190601f1680156105e55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61028c61125a565b6102c46004803603602081101561061157600080fd5b50356001600160a01b0316611260565b6102c46004803603602081101561063757600080fd5b810190602081018135600160201b81111561065157600080fd5b82018360208201111561066357600080fd5b803590602001918460208302840111600160201b8311171561068457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611375945050505050565b6102c4600480360360408110156106d857600080fd5b506001600160a01b03813516906020013561140b565b61028c6114d7565b61028c6004803603606081101561070c57600080fd5b506001600160a01b03813516906020810135906040013515156116d0565b6102c46004803603602081101561074057600080fd5b810190602081018135600160201b81111561075a57600080fd5b82018360208201111561076c57600080fd5b803590602001918460208302840111600160201b8311171561078d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506116e6945050505050565b61028c611716565b6102c4600480360360208110156107e957600080fd5b503561171c565b61053c6117f0565b61081e6004803603602081101561080e57600080fd5b50356001600160a01b03166117ff565b6040518085600381111561082e57fe5b60ff16815260200184815260200183815260200182815260200194505050505060405180910390f35b61028c61182a565b6104bc6004803603608081101561087557600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156108af57600080fd5b8201836020820111156108c157600080fd5b803590602001918460018302840111600160201b831117156108e257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611830945050505050565b61028c6004803603604081101561093957600080fd5b810190602081018135600160201b81111561095357600080fd5b82018360208201111561096557600080fd5b803590602001918460208302840111600160201b8311171561098657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505050503515159050611a32565b61028c611a76565b61028c600480360360208110156109e457600080fd5b50356001600160a01b0316611a7c565b6102c460048036036040811015610a0a57600080fd5b506001600160a01b038135169060200135611af3565b6102c4600480360360c0811015610a3657600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b811115610a7057600080fd5b820183602082011115610a8257600080fd5b803590602001918460208302840111600160201b83111715610aa357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b038335811694506020909301359092169150611d6b9050565b61028c611e32565b610b2560048036036020811015610b1557600080fd5b50356001600160a01b0316611e4b565b60405180826003811115610b3557fe5b60ff16815260200191505060405180910390f35b61053c611e60565b6102c460048036036020811015610b6757600080fd5b50356001600160a01b0316611e6f565b61028c60048036036080811015610b8d57600080fd5b6001600160a01b038235811692602081013590911691604082013515159190810190608081016060820135600160201b811115610bc957600080fd5b820183602082011115610bdb57600080fd5b803590602001918460018302840111600160201b83111715610bfc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611fa6945050505050565b61028c611fc6565b61028c60048036036020811015610c5b57600080fd5b50351515611fcc565b61053c6122c8565b61028c60048036036060811015610c8257600080fd5b506001600160a01b03813516906020810135906040013515156122d7565b61028c61234b565b6102c460048036036020811015610cbe57600080fd5b50356001600160a01b0316612351565b61053c6123be565b6000610cf8600954610cec600754610cec611e32565b9063ffffffff6123cd16565b90505b90565b6000546001600160a01b03163314610d49576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60016001600160a01b0382166000908152600e602052604090205460ff166003811115610d7257fe5b14610db9576040805162461bcd60e51b81526020600482015260126024820152716a706167656e745f6e6f745f61637469766560701b604482015290519081900360640190fd5b6001600160a01b0381166000818152600e6020526040808220805460ff19166002179055517feac6c7d5a1c157497119a5d4f661d5f23b844c415452ef440ed346bd127d885e9190a2600c54610e1690600163ffffffff6123cd16565b600c5550565b6001600160a01b0381166000908152600d6020526040812081815460ff166003811115610e4557fe5b1415610e89576040805162461bcd60e51b815260206004820152600e60248201526d36b2b6b132b92fbab735b737bbb760911b604482015290519081900360640190fd5b6001815460ff166003811115610e9b57fe5b14610ea7576000610ebe565b6002810154600b54610ebe9163ffffffff6123cd16565b8160010154019150505b919050565b6000546001600160a01b03163314610f18576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60005b8151811015610f4857610f40828281518110610f3357fe5b6020026020010151611260565b600101610f1b565b5050565b6000610f5a86868685611830565b610fa0576040805162461bcd60e51b81526020600482015260126024820152716572726f725f6261645369676e617475726560701b604482015290519081900360640190fd5b610fac8686868661240f565b9695505050505050565b6000610fcb83610fc533610fd8565b846116d0565b5092915050565b60065481565b6000610fef610fe683611a7c565b610cec84610e1c565b92915050565b6002546001600160a01b0316151590565b600061101b8361101585610fd8565b846122d7565b9392505050565b600a5481565b336001600160a01b038216148061105c57506001336000908152600e602052604090205460ff16600381111561105a57fe5b145b61109d576040805162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcd7d9195b9a5959609a1b604482015290519081900360640190fd5b6001600160a01b0381166000908152600d602052604090206001815460ff1660038111156110c757fe5b1461110d576040805162461bcd60e51b81526020600482015260116024820152706d656d6265725f6e6f745f61637469766560781b604482015290519081900360640190fd5b61111682610e1c565b600182810191909155815460ff19166002178255600a54611136916123cd565b600a556040516001600160a01b038316907f7df2bff504799b36cafb9574b3fcfd8432ef4a1fa89d1ba9fe40324501adf5f590600090a25050565b6001546001600160a01b031633146111c3576040805162461bcd60e51b815260206004820152601060248201526f37b7363ca832b73234b733a7bbb732b960811b604482015290519081900360640190fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6005546001600160a01b031681565b604080516001600160a01b0392909216600560a21b18601483015260348201905290565b60085481565b6000546001600160a01b031633146112ab576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60016001600160a01b0382166000908152600e602052604090205460ff1660038111156112d457fe5b1415611318576040805162461bcd60e51b815260206004820152600e60248201526d6a706167656e745f61637469766560901b604482015290519081900360640190fd5b6001600160a01b0381166000818152600e6020526040808220805460ff19166001179055517f10581818fb1ffbfd9ac8500cba931a30c3a57b5e9b7972f2fa0aef002b3fde2b9190a2600c54610e1690600163ffffffff61271b16565b6001336000908152600e602052604090205460ff16600381111561139557fe5b146113db576040805162461bcd60e51b81526020600482015260116024820152701bdb9b1e529bda5b94185c9d1059d95b9d607a1b604482015290519081900360640190fd5b60005b8151811015610f48576114038282815181106113f657fe5b6020026020010151611e6f565b6001016113de565b8061141533610fd8565b101561145f576040805162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e745f62616c616e636560601b604482015290519081900360640190fd5b336000908152600d602052604090206003810154611483908363ffffffff61271b16565b60038201556114928383612775565b6040805183815290516001600160a01b0385169133917f638ce96e87261f007ef5c0389bb59b90db3e19c42edee859d6b09739d8d79f7f9181900360200190a3505050565b600254604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561152757600080fd5b505afa15801561153b573d6000803e3d6000fd5b505050506040513d602081101561155157600080fd5b50519050600061156f611562610cd6565b839063ffffffff6123cd16565b90508061158157600092505050610cfb565b60006115b0670de0b6b3a76400006115a4600354856127ac90919063ffffffff16565b9063ffffffff61280516565b905060006115c4838363ffffffff6123cd16565b905060006115dd600a548361280590919063ffffffff16565b600b549091506115f3908263ffffffff61271b16565b600b55600654611609908363ffffffff61271b16565b60065560085461161f908463ffffffff61271b16565b6008556040805185815290517f41b06c6e0a1531dcb4b86d53ec6268666aa12d55775f8e5a63596fc935cdcc229181900360200190a1600a5460408051838152602081019290925280517ff74e10cbd1c87229fe868ed3a35ebea686515293ff04a097409a4e3e089e6cac9281900390910190a16040805184815290517f538d1b2114be2374c7010694167f3db7f2d56f864a4e1555582b9716b7d11c3d9181900360200190a15091935050505090565b60006116de3385858561240f565b509392505050565b60005b8151811015610f485761170e82828151811061170157fe5b6020026020010151611028565b6001016116e9565b60075481565b6000546001600160a01b03163314611767576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b670de0b6b3a76400008111156117b5576040805162461bcd60e51b815260206004820152600e60248201526d6572726f725f61646d696e46656560901b604482015290519081900360640190fd5b60038190556040805182815290517f11a80b766155f9b8f16a7da44d66269fd694cb1c247f4814244586f68dd534879181900360200190a150565b6000546001600160a01b031681565b600d60205260009081526040902080546001820154600283015460039093015460ff90921692909184565b600c5481565b60008151604114611888576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f6261645369676e61747572654c656e6774680000000000000000604482015290519081900360640190fd5b60208201516040830151606084015160001a601b8110156118a757601b015b8060ff16601b14806118bc57508060ff16601c145b61190d576040805162461bcd60e51b815260206004820152601960248201527f6572726f725f6261645369676e617475726556657273696f6e00000000000000604482015290519081900360640190fd5b600087873061191b8c611a7c565b60405160200180807f19457468657265756d205369676e6564204d6573736167653a0a313034000000815250601d01856001600160a01b03166001600160a01b031660601b8152601401848152602001836001600160a01b03166001600160a01b031660601b8152601401828152602001945050505050604051602081830303815290604052805190602001209050600060018284878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611a09573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038c811691161496505050505050505b949350505050565b600080805b84518110156116de57611a6d611a60868381518110611a5257fe5b602002602001015186611006565b839063ffffffff61271b16565b50600101611a37565b60095481565b6001600160a01b0381166000908152600d6020526040812081815460ff166003811115611aa557fe5b1415611ae9576040805162461bcd60e51b815260206004820152600e60248201526d36b2b6b132b92fbab735b737bbb760911b604482015290519081900360640190fd5b6003015492915050565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611b3e57600080fd5b505afa158015611b52573d6000803e3d6000fd5b505050506040513d6020811015611b6857600080fd5b5051600254604080516323b872dd60e01b81523360048201523060248201526044810186905290519293506001600160a01b03909116916323b872dd916064808201926020929091908290030181600087803b158015611bc757600080fd5b505af1158015611bdb573d6000803e3d6000fd5b505050506040513d6020811015611bf157600080fd5b5051611c36576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c97d9985a5b1959608a1b604482015290519081900360640190fd5b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611c8157600080fd5b505afa158015611c95573d6000803e3d6000fd5b505050506040513d6020811015611cab57600080fd5b5051905082611cc0828463ffffffff6123cd16565b1015611d05576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c97d9985a5b1959608a1b604482015290519081900360640190fd5b611d0f8484612775565b600654611d22908463ffffffff61271b16565b6006556040805184815290516001600160a01b0386169133917f4e018df3c92158645fcf45007db7029d3fa97d269866be2bd4360c5f5a6163e49181900360200190a350505050565b611d73610ff5565b15611db1576040805162461bcd60e51b8152602060048201526009602482015268696e69745f6f6e636560b81b604482015290519081900360640190fd5b60008054336001600160a01b031991821617909155600280549091166001600160a01b038716179055611de38461171c565b611dec83610ecd565b600480546001600160a01b039384166001600160a01b03199182161790915560058054928416928216929092179091556000805496909216951694909417909355505050565b6000610cf860085460065461271b90919063ffffffff16565b600e6020526000908152604090205460ff1681565b6004546001600160a01b031681565b6001336000908152600e602052604090205460ff166003811115611e8f57fe5b14611ed5576040805162461bcd60e51b81526020600482015260116024820152701bdb9b1e529bda5b94185c9d1059d95b9d607a1b604482015290519081900360640190fd5b6001600160a01b0381166000908152600d602052604090206001815460ff166003811115611eff57fe5b1415611f4a576040805162461bcd60e51b81526020600482015260156024820152746d656d6265725f616c72656164795f61637469766560581b604482015290519081900360640190fd5b805460ff191660019081178255600b546002830155600a54611f6b9161271b565b600a556040516001600160a01b038316907f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab90600090a25050565b6000611fbd8585611fb688610fd8565b8686610f4c565b95945050505050565b60035481565b600080546001600160a01b03163314612018576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60006120316009546008546123cd90919063ffffffff16565b905080612042576000915050610ec8565b600954612055908263ffffffff61271b16565b60095582156121b4576002546004546000546001600160a01b0392831692634000aea09281169185916120889116611236565b6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156120f25781810151838201526020016120da565b50505050905090810190601f16801561211f5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561214057600080fd5b505af1158015612154573d6000803e3d6000fd5b505050506040513d602081101561216a57600080fd5b50516121af576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c97d9985a5b1959608a1b604482015290519081900360640190fd5b612280565b600254600080546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018690529051919093169263a9059cbb9260448083019360209390929083900390910190829087803b15801561221157600080fd5b505af1158015612225573d6000803e3d6000fd5b505050506040513d602081101561223b57600080fd5b5051612280576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c97d9985a5b1959608a1b604482015290519081900360640190fd5b6000546040805183815290516001600160a01b03909216917fcdcaff67ac16639664e5f9343c9223a1dc9c972ec367b69ae9fc1325c7be54749181900360200190a292915050565b6001546001600160a01b031681565b6000336001600160a01b03851614806122fa57506000546001600160a01b031633145b61233f576040805162461bcd60e51b81526020600482015260116024820152701c195c9b5a5cdcda5bdb97d9195b9a5959607a1b604482015290519081900360640190fd5b6116de8485858561240f565b600b5481565b6000546001600160a01b0316331461239c576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b600061101b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612847565b60008261241e57506000611a2a565b61242785610fd8565b831115612470576040805162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e745f66756e647360701b604482015290519081900360640190fd5b6001600160a01b0385166000908152600d60205260409020600381015461249d908563ffffffff61271b16565b60038201556007546124b5908563ffffffff61271b16565b600755821561260d576002546004546001600160a01b0391821691634000aea09116866124e189611236565b6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561254b578181015183820152602001612533565b50505050905090810190601f1680156125785780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561259957600080fd5b505af11580156125ad573d6000803e3d6000fd5b505050506040513d60208110156125c357600080fd5b5051612608576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c97d9985a5b1959608a1b604482015290519081900360640190fd5b6126d2565b6002546040805163a9059cbb60e01b81526001600160a01b038881166004830152602482018890529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561266357600080fd5b505af1158015612677573d6000803e3d6000fd5b505050506040513d602081101561268d57600080fd5b50516126d2576040805162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c97d9985a5b1959608a1b604482015290519081900360640190fd5b6040805185815290516001600160a01b038816917f48dc35af7b45e2a81fffad55f6e2fafacdb1d3d0d50d24ebdc16324f5ba757f1919081900360200190a25091949350505050565b60008282018381101561101b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152600d6020526040902060018101546127a2908363ffffffff61271b16565b6001909101555050565b6000826127bb57506000610fef565b828202828482816127c857fe5b041461101b5760405162461bcd60e51b81526004018080602001828103825260218152602001806129446021913960400191505060405180910390fd5b600061101b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506128de565b600081848411156128d65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561289b578181015183820152602001612883565b50505050905090810190601f1680156128c85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000818361292d5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561289b578181015183820152602001612883565b50600083858161293957fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212203a0566d19c1ae4033cf48c0fdffaf4dc24f9012f134fd8af13efab730447305964736f6c63430006060033'
/* eslint-enable max-len, object-curly-newline */

/**
 * Deploy template DataUnion contract as well as factory to sidechain
 * @param wallet {Wallet} sidechain wallet that is used in deployment
 * @returns {Promise<Contract>} DataUnionFactorySidechain contract
 */
async function deployDataUnionFactorySidechain(wallet) {
    log(`Deploying template DU sidechain contract from ${wallet.address}`)
    const templateDeployer = new ContractFactory([], dataUnionSidechainBytecode, wallet)
    const templateTx = await templateDeployer.deploy({
        gasLimit: 6000000
    })
    templateSidechain = await templateTx.deployed()
    log(`Side-chain template DU: ${templateSidechain.address}`)

    // constructor(address _token_mediator, address _data_union_sidechain_template)
    log(`Deploying sidechain DU factory contract from ${wallet.address}`)
    const factoryDeployer = new ContractFactory(factorySidechainABI, factorySidechainBytecode, wallet)
    const factoryTx = await factoryDeployer.deploy(
        tokenMediatorSidechainAddress,
        templateSidechain.address,
        {
            gasLimit: 6000000
        }
    )
    return factoryTx.deployed()
}

function getTemplateSidechain() {
    if (!templateSidechain) {
        throw new Error('deployDataUnionFactorySidechain must be called (and awaited) first')
    }
    return templateSidechain
}

async function deployDataUnionFactoryMainnet(wallet, sidechainTemplateAddress, sidechainFactoryAddress) {
    log(`Deploying template DU mainnet contract from ${wallet.address}`)
    const templateDeployer = new ContractFactory([], dataUnionMainnetBytecode, wallet)
    const templateTx = await templateDeployer.deploy({
        gasLimit: 6000000
    })
    const templateDU = await templateTx.deployed()
    log(`Mainnet template DU: ${templateDU.address}. Deploying DU mainnet factory contract from ${wallet.address}`)
    const factoryDeployer = new ContractFactory(factoryMainnetABI, factoryMainnetBytecode, wallet)
    const factoryTx = await factoryDeployer.deploy(
        tokenMediatorMainnetAddress,
        templateDU.address,
        sidechainTemplateAddress,
        sidechainFactoryAddress,
        2000000,
        {
            gasLimit: 6000000
        }
    )
    return factoryTx.deployed()
}
