name: Lint, Unit, Integration Tests
env:
  CI: true
  DEBUG_COLORS: true
  DEBUG: "Streamr*"
on:
  push:
    tags:
      - "*"
    branches:
      - master
  pull_request:
    branches:
      - "*"
  schedule:
    # run every day at 00:00
    - cron: "0 0 * * *"

jobs:
  build:
    name: Run build using Node 14.x
    runs-on: ubuntu-latest
    env:
      BUNDLE_ANALYSIS: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - name: npm ci
        run: npm ci
      - name: npm run build
        run: npm run build
      - uses: actions/upload-artifact@v2
        with:
          name: build
          path: dist

  lint:
    name: Run linter using Node 14.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - name: npm ci
        run: npm ci
      - name: npm run eslint
        run: npm run eslint

  test:
    name: Test Unit using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm ci
        run: npm ci
      - name: test-unit
        timeout-minutes: 2
        run: npm run test-unit

  integration:
    name: ${{ matrix.test-name }} using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [12.x, 14.x]
        test-name: ['test-integration-no-resend', 'test-integration-resend']
    env:
        TEST_NAME: ${{ matrix.test-name }}
        WEBSOCKET_URL: ws://localhost:8890/api/v1/ws

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm ci
        run: npm ci
      - uses: actions/checkout@v2
        with:
          repository: streamr-dev/streamr-docker-dev
          path: streamr-dev
      - name: setup streamr-dev
        run: |
          sudo service mysql stop
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start --wait
      - name: Run Test
        run: npm run $TEST_NAME -- --maxWorkers=1

  flakey:
    name: Flakey Tests using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [12.x, 14.x]
    env:
        WEBSOCKET_URL: ws://localhost:8890/api/v1/ws

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm ci
        run: npm ci
      - uses: actions/checkout@v2
        with:
          repository: streamr-dev/streamr-docker-dev
          path: streamr-dev
      - name: setup streamr-dev
        run: |
          sudo service mysql stop
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start --wait
      - uses: nick-invision/retry@v2
        name: Run Test
        with:
          max_attempts: 2
          timeout_minutes: 15
          retry_on: error
          command: npm run test-flakey || echo "::warning::Flakey Tests Failed"

  browser:
    name: Test Browser using Node 14.x
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dist
      - name: npm ci
        run: npm ci
      - uses: actions/checkout@v2
        with:
          repository: streamr-dev/streamr-docker-dev
          path: streamr-dev
      - name: setup streamr-dev
        run: |
          sudo service mysql stop
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start nginx broker-node-storage-1 broker-node-no-storage-1 broker-node-no-storage-2 engine-and-editor tracker-1 --wait
      - name: test-browser
        timeout-minutes: 2
        run: WEBSOCKET_URL=ws://localhost:8890/api/v1/ws npm run test-browser

  benchmarks:
    name: Test Benchmark using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        node-version: [12.x, 14.x]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dist
      - uses: actions/checkout@v2
        with:
          repository: streamr-dev/streamr-docker-dev
          path: streamr-dev
      - name: setup streamr-dev
        run: |
          sudo service mysql stop
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start nginx broker-node-storage-1 broker-node-no-storage-1 broker-node-no-storage-2 engine-and-editor tracker-1 --wait
      - name: npm ci
        run: npm ci
      - name: benchmarks
        run: npm run benchmarks > benchmarks.txt
      - uses: actions/upload-artifact@v2
        with:
          name: benchmarks
          path: benchmarks.txt

  streamr-client-testing-tool:
    name: ${{ matrix.config-name }} ${{ matrix.test-name }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-name:
          - stream-cleartext-unsigned
          - stream-cleartext-signed
          - stream-encrypted-shared-signed
          - stream-encrypted-shared-rotating-signed
          - stream-encrypted-exchanged-rotating-signed
        config-name:
          - default
          - js-only
          - java-only
          - realtime-only
          - js-realtime-only
          - java-realtime-only
    env:
        NUM_MESSAGES: 10
        TEST_NAME: ${{ matrix.test-name }}
        CONFIG_NAME: ${{ matrix.config-name }}
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dist
      - uses: actions/checkout@v2
        with:
          repository: streamr-dev/streamr-docker-dev
          path: streamr-dev
      - name: setup-docker
        run: |
          sudo service mysql stop
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start nginx broker-node-storage-1 broker-node-no-storage-1 broker-node-no-storage-2 engine-and-editor tracker-1 --wait
      - name: npm link
        run: npm ci && npm link
      - uses: actions/checkout@v2
        with:
          repository: streamr-dev/streamr-client-testing
          path: streamr-client-testing
      - name: setup-client-testing
        working-directory: streamr-client-testing
        run: |
          #echo "Setup package.json to use PR JS client"
          #sed -i "s/com.streamr:client:1.3.0/com.streamr:client:+/g" build.gradle
          #sed -i "s/\"streamr-client\": \"latest\"/\"streamr-client\":\"PATH\"/g" package.json
          ## fix for escaping / of workspace path
          #sed -i "s|"PATH"|"${GITHUB_WORKSPACE}"|g" package.json
          #echo "Prepare for test"
          #cat package.json
          ## npm install is used because package-lock.json could be form a previous client version.
          npm install
          npm link streamr-client
          ./gradlew fatjar
      - name: run-client-testing
        timeout-minutes: 10
        working-directory: streamr-client-testing
        run: java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s $TEST_NAME -c config/$CONFIG_NAME.conf -n $NUM_MESSAGES
