name: Lint, Unit, Integration Tests
env:
  CI: true
  DEBUG_COLORS: true
  DEBUG: "Streamr*"
on:
  push:
    tags:
      - "*"
    branches:
      - master
  pull_request:
    branches:
      - "*"
  schedule:
    # run every day at 00:00
    - cron: "0 0 * * *"

jobs:
  build:
    name: Run build using Node 14
    runs-on: ubuntu-latest
    env:
      BUNDLE_ANALYSIS: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - name: npm ci
        run: npm ci
      - name: npm run build
        run: npm run build
      - uses: actions/upload-artifact@v2
        with:
          name: build
          path: dist

  lint:
    name: Run linter using Node 14.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - name: npm ci
        run: npm ci
      - name: npm run eslint
        run: npm run eslint

  test:
    name: Test Unit using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm ci
        run: npm ci
      - name: test-unit
        run: npm run test-unit

  integration:
    name: Test Integration using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm ci
        run: npm ci
      - uses: actions/checkout@v2
        with:
          repository: streamr-dev/streamr-docker-dev
          path: streamr-dev
      - name: setup streamr-dev
        run: |
          sudo service mysql stop
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start --wait
      - name: test-integration
        run: WEBSOCKET_URL=ws://localhost:8890/api/v1/ws DEBUG=Streamr* npm run test-integration -- --maxWorkers=1
      - name: test-flakey
        run: WEBSOCKET_URL=ws://localhost:8890/api/v1/ws npm run test-flakey || echo "::warning::Flakey Tests Failed" && true

  browser:
    name: Test Browser using Node 14.x
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dist
      - name: npm ci
        run: npm ci
      - uses: actions/checkout@v2
        with:
          repository: streamr-dev/streamr-docker-dev
          path: streamr-dev
      - name: setup streamr-dev
        run: |
          sudo service mysql stop
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start nginx broker-node-storage-1 broker-node-no-storage-1 broker-node-no-storage-2 engine-and-editor tracker-1 --wait
      - name: test-browser
        run: WEBSOCKET_URL=ws://localhost:8890/api/v1/ws npm run test-browser

  benchmarks:
    name: Test Benchmark using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        node-version: [12.x, 14.x]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dist
      - name: npm ci
        run: npm ci
      - uses: actions/checkout@v2
        with:
          repository: streamr-dev/streamr-docker-dev
          path: streamr-dev
      - name: setup streamr-dev
        run: |
          sudo service mysql stop
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start nginx broker-node-storage-1 broker-node-no-storage-1 broker-node-no-storage-2 engine-and-editor tracker-1 --wait
      - name: benchmarks
        run: npm run benchmarks > benchmarks.txt
      - uses: actions/upload-artifact@v2
        with:
          name: benchmarks
          path: benchmarks.txt

      - name: test-flakey
        run: npm run test-flakey || echo "::warning::Flakey Tests Failed" && true

  streamr-client-testing-tool:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dist
      - uses: actions/checkout@v2
        with:
          repository: streamr-dev/streamr-docker-dev
          path: streamr-dev
      - uses: actions/checkout@v2
        with:
          repository: streamr-dev/streamr-client-testing
          path: streamr-client-testing
      - name: setup
        run: |
          sudo service mysql stop
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start nginx broker-node-storage-1 broker-node-no-storage-1 broker-node-no-storage-2 engine-and-editor tracker-1 --wait
          cd ${GITHUB_WORKSPACE}/streamr-client-testing
          echo "Setup package.json to use PR JS client"
          sed -i "s/com.streamr:client:1.3.0/com.streamr:client:+/g" build.gradle
          sed -i "s/\"streamr-client\": \"\^3.1.2\"/\"streamr-client\":\"PATH\"/g" package.json
          ## fix for escaping / of workspace path
          sed -i "s|"PATH"|"${GITHUB_WORKSPACE}"|g" package.json
          echo "Prepare for test"
          ## npm install is used because package-lock.json could be form a previous client version.
          npm install
          ./gradlew fatjar
      - name: test
        run: |
          cd ${GITHUB_WORKSPACE}/streamr-client-testing
          echo "Run streamr-client test"
          java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s stream-cleartext-unsigned -n 10
          java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s stream-cleartext-signed -n 10
          java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s stream-encrypted-shared-signed -n 10
          java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s stream-encrypted-shared-rotating-signed -n 10
          java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s stream-encrypted-exchanged-rotating-signed -n 10

