name: Lint, Unit, Integration Tests
env:
  CI: true
on:
  push:
    tags:
      - '*'
    branches:
      - master
  pull_request:
    branches:
      - '*'
  schedule:
    # run every day at 00:00
    - cron:  '0 0 * * *'

jobs:
  install:
    name: Install using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm ci
        run: npm ci
      - uses: actions/upload-artifact@v2
        with:
          name: install-${{ matrix.node-version }}
          path: ${{ github.workspace }}

  build:
    needs: install
    name: Run build using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x]
    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v2
        with:
          name: install-${{ matrix.node-version }}
      - name: npm run build
        run: npm run build
      - uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.node-version }}
          path: ${{ github.workspace }}

  lint:
    needs: install
    name: Run linter using Node 14.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - uses: actions/download-artifact@v2
        with:
          name: install-14.x
      - name: npm run eslint
        run: npm run eslint

  test:
    name: Test Unit using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    needs: [lint, install]
    strategy:
      matrix:
        node-version: [12.x, 14.x]

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v2
        with:
          name: install-${{ matrix.node-version }}
      - name: test-unit
        run: npm run test-unit

  integration:
    name: Test Integration using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    needs: [test, lint, build]

    strategy:
      matrix:
        node-version: [12.x, 14.x]

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v2
        with:
          name: build-${{ matrix.node-version }}

      - name: setup streamr-dev
        run: |
          sudo service mysql stop
          git clone https://github.com/streamr-dev/streamr-dev.git
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start --wait
      - name: test-integration
        run: WEBSOCKET_URL=ws://localhost:8890/api/v1/ws DEBUG=Streamr* npm run test-integration -- --maxWorkers=1
      - name: test-flakey
        run: npm run test-flakey || echo "::warning::Flakey Tests Failed" && true

  browser:
    name: Test Benchmark/Browser Integration using Node 14.x
    runs-on: ubuntu-latest
    needs: [test, lint, build]

    strategy:
      matrix:
        node-version: 14.x

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - uses: actions/download-artifact@v2
        with:
          name: build-14.x

      - name: setup streamr-dev
        run: |
          sudo service mysql stop
          git clone https://github.com/streamr-dev/streamr-dev.git
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start --wait
      - name: test-browser
        run: WEBSOCKET_URL=ws://localhost:8890/api/v1/ws npm run test-browser

  benchmarks:
    name: Test Benchmark using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    needs: [test, lint, build]

    strategy:
      matrix:
        node-version: [12.x, 14.x]

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v2
        with:
          name: build-${{ matrix.node-version }}

      - name: setup streamr-dev
        run: |
          sudo service mysql stop
          git clone https://github.com/streamr-dev/streamr-dev.git
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start --wait
      - name: benchmarks
        run: npm run benchmarks

      - name: test-flakey
        run: npm run test-flakey || echo "::warning::Flakey Tests Failed" && true

  streamr-client-testing-tool:
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    steps:
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - uses: actions/download-artifact@v2
      - name: setup
        with:
          name: build-14.x
        run: |
          sudo service mysql stop
          if [ ! -d streamr-dev ]; then # Skip clone on subsequent attemps.
           git clone https://github.com/streamr-dev/streamr-dev.git
          fi
          (cd ${GITHUB_WORKSPACE}/streamr-dev/ && git pull --rebase)
          sudo ifconfig docker0 10.200.10.1/24
          ${GITHUB_WORKSPACE}/streamr-dev/streamr-docker-dev/bin.sh start --wait
          echo "Testing Tool setup"

          if [ ! -d streamr-client-testing ]; then # Skip clone on subsequent attemps.
            git clone https://github.com/streamr-dev/streamr-client-testing.git
          fi
          cd ${GITHUB_WORKSPACE}/streamr-client-testing
          git pull --rebase
          echo "Setup package.json to use PR JS client"
          sed -i "s/com.streamr:client:1.3.0/com.streamr:client:+/g" build.gradle
          sed -i "s/\"streamr-client\": \"\^3.1.2\"/\"streamr-client\":\"PATH\"/g" package.json
          ## fix for escaping / of workspace path
          sed -i "s|"PATH"|"${GITHUB_WORKSPACE}"|g" package.json
          echo "Prepare for test"
          ## npm install is used because package-lock.json could be form a previous client version.
          npm install
          ./gradlew fatjar
      - name: test
        env:
          DEBUG: 'Streamr*'
          DEBUG_COLORS: 'yes'
        run: |
          cd ${GITHUB_WORKSPACE}/streamr-client-testing
          echo "Run streamr-client test"
          java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s stream-cleartext-unsigned
          java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s stream-cleartext-signed
          java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s stream-encrypted-shared-signed
          java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s stream-encrypted-shared-rotating-signed
          java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s stream-encrypted-exchanged-rotating-signed
